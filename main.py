import telebot
import openai
import requests
import os
import traceback
from datetime import datetime

BOT_TOKEN = os.getenv("BOT_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")

if not BOT_TOKEN:
    raise RuntimeError("BOT_TOKEN is not set in environment variables")
if not OPENAI_API_KEY:
    raise RuntimeError("OPENAI_API_KEY is not set in environment variables")

bot = telebot.TeleBot(BOT_TOKEN)
openai.api_key = OPENAI_API_KEY

def tts_to_ogg(answer_text: str, base_filename: str = "reply") -> str:
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –≥–æ–ª–æ—Å (OGG/Opus) —á–µ—Ä–µ–∑ OpenAI TTS –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É.
    """
    # –∏–º—è —Å —Ç–∞–π–º—Å—Ç–µ–º–ø–æ–º, —á—Ç–æ–±—ã –Ω–µ –∑–∞—Ç–∏—Ä–∞—Ç—å
    fname = f"{base_filename}_{datetime.utcnow().strftime('%Y%m%d%H%M%S')}.ogg"

    # ‚ö†Ô∏è –ù–æ–≤–æ–µ API OpenAI: "audio.speech.create"
    audio = openai.audio.speech.create(
        model="gpt-4o-mini-tts",   # –¥–µ—à—ë–≤–∞—è –∏ –±—ã—Å—Ç—Ä–∞—è TTS-–º–æ–¥–µ–ª—å
        voice="alloy",             # –≥–æ–ª–æ—Å (–º–æ–∂–Ω–æ: alloy, verse, coral, etc.)
        input=answer_text,
        format="opus"              # –ø—Ä–æ—Å–∏–º Opus (Telegram voice –ø–æ–Ω–∏–º–∞–µ—Ç)
    )
    # audio —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ ‚Äî –±–∞–π—Ç—ã ogg/opus
    with open(fname, "wb") as f:
        f.write(audio)            # SDK –æ—Ç–¥–∞—ë—Ç bytes-like

    return fname

@bot.message_handler(commands=['start'])
def start(message):
    bot.send_message(message.chat.id, "üëã Hallo! Sprich mit mir auf Deutsch. Schick mir eine Sprachnachricht oder schreibe mir.")

# üé§ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@bot.message_handler(content_types=['voice'])
def handle_voice(message):
    try:
        file_info = bot.get_file(message.voice.file_id)
        file = requests.get(f'https://api.telegram.org/file/bot{BOT_TOKEN}/{file_info.file_path}', timeout=30)

        local_path = "voice.ogg"
        with open(local_path, "wb") as f:
            f.write(file.content)

        with open(local_path, "rb") as audio_file:
            transcript = openai.audio.transcriptions.create(
                model="gpt-4o-mini-transcribe",
                file=audio_file
            )

        user_text = transcript.text if hasattr(transcript, "text") else str(transcript)

        response = openai.chat.completions.create(
            model="gpt-4o-mini",
            messages=[
                {"role": "system", "content": "Du bist ein freundlicher Deutschlehrer. Antworte kurz und nat√ºrlich auf Deutsch und korrigiere Fehler mit einer kurzen Erkl√§rung."},
                {"role": "user", "content": user_text}
            ]
        )

        answer = response.choices[0].message.content

        # 1) –¢–µ–∫—Å—Ç–æ–º
        bot.send_message(message.chat.id, answer)

        # 2) –ì–æ–ª–æ—Å–æ–º (OGG/Opus)
        try:
            ogg_path = tts_to_ogg(answer, base_filename="voice_reply")
            with open(ogg_path, "rb") as vf:
                bot.send_voice(message.chat.id, vf)
        except Exception as tts_err:
            # –µ—Å–ª–∏ TTS –≤–¥—Ä—É–≥ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª ‚Äî –ø—Ä–æ—Å—Ç–æ –º–æ–ª—á–∞ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º voice, –≤ –ª–æ–≥ –ø–∏—à–µ–º
            print("TTS error:", tts_err)
            traceback.print_exc()

    except Exception as e:
        bot.send_message(message.chat.id, "Es gab einen Fehler bei der Verarbeitung der Sprachnachricht. Versuche es bitte noch einmal.")
        print("Voice handler error:", e)
        traceback.print_exc()

# ‚úçÔ∏è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@bot.message_handler(func=lambda m: True, content_types=['text'])
def handle_text(message):
    try:
        response = openai.chat.completions.create(
            model="gpt-4o-mini",
            messages=[
                {"role": "system", "content": "Du bist ein freundlicher Deutschlehrer. Antworte kurz und nat√ºrlich auf Deutsch und korrigiere Fehler mit einer kurzen Erkl√§rung."},
                {"role": "user", "content": message.text}
            ]
        )
        answer = response.choices[0].message.content

        # 1) –¢–µ–∫—Å—Ç–æ–º
        bot.send_message(message.chat.id, answer)

        # 2) –ì–æ–ª–æ—Å–æ–º
        try:
            ogg_path = tts_to_ogg(answer, base_filename="text_reply")
            with open(ogg_path, "rb") as vf:
                bot.send_voice(message.chat.id, vf)
        except Exception as tts_err:
            print("TTS error:", tts_err)
            traceback.print_exc()

    except Exception as e:
        bot.send_message(message.chat.id, "Entschuldige, da ist etwas schiefgelaufen. Bitte versuche es sp√§ter erneut.")
        print("Text handler error:", e)
        traceback.print_exc()

print("ü§ñ Bot l√§uft...")
bot.polling(none_stop=True)
