import os
import traceback
import requests
import telebot
from datetime import datetime
from openai import OpenAI

# === Env ===
BOT_TOKEN = os.getenv("BOT_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
if not BOT_TOKEN:
    raise RuntimeError("BOT_TOKEN is not set in environment variables")
if not OPENAI_API_KEY:
    raise RuntimeError("OPENAI_API_KEY is not set in environment variables")

# === Clients ===
bot = telebot.TeleBot(BOT_TOKEN)
client = OpenAI(api_key=OPENAI_API_KEY)

# === –†–µ–∂–∏–º—ã ===
# "teacher" | "chat" | "mix" | "auto"
user_modes = {}
DEFAULT_MODE = "chat"

def get_mode(user_id: int) -> str:
    return user_modes.get(user_id, DEFAULT_MODE)

def set_mode(user_id: int, mode: str):
    user_modes[user_id] = mode

# === TTS (OGG + fallback MP3) ===
def send_tts(chat_id: int, text: str, base: str = "reply"):
    try:
        ogg_path = f"{base}_{datetime.utcnow().strftime('%Y%m%d%H%M%S')}.ogg"
        with client.audio.speech.with_streaming_response.create(
            model="tts-1",
            voice="alloy",
            input=text,
            response_format="opus"
        ) as resp:
            resp.stream_to_file(ogg_path)
        with open(ogg_path, "rb") as f:
            bot.send_voice(chat_id, f)
        return
    except Exception as e:
        print("OGG/Opus TTS failed:", e)
        traceback.print_exc()

    try:
        mp3_path = f"{base}_{datetime.utcnow().strftime('%Y%m%d%H%M%S')}.mp3"
        with client.audio.speech.with_streaming_response.create(
            model="tts-1",
            voice="alloy",
            input=text,
            response_format="mp3"
        ) as resp:
            resp.stream_to_file(mp3_path)
        with open(mp3_path, "rb") as f:
            bot.send_audio(chat_id, f, title="Antwort (TTS)")
    except Exception as e2:
        print("MP3 TTS also failed:", e2)
        traceback.print_exc()

# === –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ ===
def generate_reply(user_text: str, mode: str):
    if mode == "teacher":
        system = (
            "–¢—ã —É—á–∏—Ç–µ–ª—å –Ω–µ–º–µ—Ü–∫–æ–≥–æ. –°–Ω–∞—á–∞–ª–∞ –¥–∞–π –∫–æ—Ä–æ—Ç–∫–∏–π –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ –Ω–µ–º–µ—Ü–∫–æ–º "
            "–¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Ä–∞–∑–≥–æ–≤–æ—Ä–∞. –ó–∞—Ç–µ–º –æ—Ü–µ–Ω–∏ —Ä–µ–ø–ª–∏–∫—É —É—á–µ–Ω–∏–∫–∞ –∏ –ø–æ–¥–≥–æ—Ç–æ–≤—å "
            "–æ—Ç–¥–µ–ª—å–Ω—ã–π –∫—Ä–∞—Ç–∫–∏–π –±–ª–æ–∫ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π –Ω–∞ —Ä—É—Å—Å–∫–æ–º. –ï—Å–ª–∏ –æ—à–∏–±–æ–∫ –Ω–µ—Ç ‚Äî –Ω–∞–ø–∏—à–∏ '–û—à–∏–±–æ–∫ –Ω–µ—Ç'."
        )
    elif mode == "mix":
        system = (
            "–¢—ã —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫ –Ω–∞ –Ω–µ–º–µ—Ü–∫–æ–º. –û—Ç–≤–µ—á–∞–π –∫–æ—Ä–æ—Ç–∫–æ –∏ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ. "
            "–ò—Å–ø—Ä–∞–≤–ª—è–π –æ—à–∏–±–∫–∏ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —è–≤–Ω–æ –ø—Ä–æ—Å–∏—Ç ('–∏—Å–ø—Ä–∞–≤—å', 'korrigiere')."
        )
    elif mode == "auto":
        system = (
           "–¢—ã —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫ –∏ —Å—Ç—Ä–æ–≥–∏–π –∫–æ—Ä—Ä–µ–∫—Ç–æ—Ä –Ω–µ–º–µ—Ü–∫–æ–≥–æ —è–∑—ã–∫–∞. "
            "1. –°–Ω–∞—á–∞–ª–∞ –¥–∞–π –∫–æ—Ä–æ—Ç–∫–∏–π –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ –Ω–µ–º–µ—Ü–∫–æ–º (1‚Äì2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è), –ø—Ä–æ–¥–æ–ª–∂–∞—è —Ä–∞–∑–≥–æ–≤–æ—Ä. "
            "2. –ü–æ—Ç–æ–º –ø—Ä–æ–≤–µ—Ä—å —Å–æ–æ–±—â–µ–Ω–∏–µ —É—á–µ–Ω–∏–∫–∞ –Ω–∞ –≥—Ä–∞–º–º–∞—Ç–∏—á–µ—Å–∫–∏–µ, —Å–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–∏–µ –∏ –ª–µ–∫—Å–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏. "
            "3. –ï—Å–ª–∏ –µ—Å—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω–∞ –æ—à–∏–±–∫–∞ (–≤–∫–ª—é—á–∞—è –ø–æ—Ä—è–¥–æ–∫ —Å–ª–æ–≤!) ‚Äî –Ω–∞–ø–∏—à–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –∏ –æ–±—ä—è—Å–Ω–∏ –Ω–∞ —Ä—É—Å—Å–∫–æ–º. "
            "4. –ï—Å–ª–∏ –æ—à–∏–±–æ–∫ –Ω–µ—Ç ‚Äî –Ω–∞–ø–∏—à–∏ '–û—à–∏–±–æ–∫ –Ω–µ—Ç'."
        )
    else:  # chat
        system = (
            "–¢—ã —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫ –Ω–∞ –Ω–µ–º–µ—Ü–∫–æ–º. –û—Ç–≤–µ—á–∞–π –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ –∏ –∫–æ—Ä–æ—Ç–∫–æ. "
            "–ù–µ –∏—Å–ø—Ä–∞–≤–ª—è–π –∏ –Ω–µ –æ–±—ä—è—Å–Ω—è–π."
        )

    resp = client.chat.completions.create(
        model="gpt-4o-mini",
        messages=[
            {"role": "system", "content": system},
            {"role": "user", "content": user_text}
        ],
        temperature=0.7,
    )
    full = resp.choices[0].message.content.strip()

    german_reply = full
    ru_explain = ""

    if mode in ("teacher", "auto"):
        parts = [p.strip() for p in full.split("\n") if p.strip()]
        ru_parts = [p for p in parts if any("–∞" <= ch <= "—è" or "–ê" <= ch <= "–Ø" for ch in p)]
        if ru_parts:
            ru_explain = "\n".join(ru_parts)
            de_parts = [p for p in parts if p not in ru_parts]
            german_reply = " ".join(de_parts).strip() or german_reply

    return german_reply, ru_explain

# === –ö–æ–º–∞–Ω–¥—ã ===
@bot.message_handler(commands=['start', 'help'])
def start(message):
    set_mode(message.from_user.id, DEFAULT_MODE)
    bot.send_message(
        message.chat.id,
        "üëã Hallo! Ich bin dein Deutsch-Bot.\n"
        "–ö–æ–º–∞–Ω–¥—ã:\n"
        "‚Ä¢ /teacher_on ‚Äì –≤—Å–µ–≥–¥–∞ –∏—Å–ø—Ä–∞–≤–ª—è—é –∏ –æ–±—ä—è—Å–Ω—è—é\n"
        "‚Ä¢ /teacher_off ‚Äì —Ç–æ–ª—å–∫–æ –Ω–µ–º–µ—Ü–∫–∏–π, –±–µ–∑ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π\n"
        "‚Ä¢ /mix ‚Äì –∏—Å–ø—Ä–∞–≤–ª—è—é —Ç–æ–ª—å–∫–æ –ø–æ –ø—Ä–æ—Å—å–±–µ\n"
        "‚Ä¢ /auto ‚Äì –∏—Å–ø—Ä–∞–≤–ª—è—é –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏, –Ω–æ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ—à–∏–±–∫–∏ –µ—Å—Ç—å\n"
        "‚Ä¢ /status ‚Äì –ø–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–π —Ä–µ–∂–∏–º\n\n"
        "Schick mir Text oder eine Sprachnachricht!"
    )

@bot.message_handler(commands=['teacher_on'])
def teacher_on(message):
    set_mode(message.from_user.id, "teacher")
    bot.send_message(message.chat.id, "üßë‚Äçüè´ –†–µ–∂–∏–º –£—á–∏—Ç–µ–ª—è –≤–∫–ª—é—á—ë–Ω.")

@bot.message_handler(commands=['teacher_off'])
def teacher_off(message):
    set_mode(message.from_user.id, "chat")
    bot.send_message(message.chat.id, "üí¨ –†–µ–∂–∏–º –°–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞ –≤–∫–ª—é—á—ë–Ω.")

@bot.message_handler(commands=['mix'])
def mix_mode(message):
    set_mode(message.from_user.id, "mix")
    bot.send_message(message.chat.id, "üîÄ –ú–∏–∫—Å –≤–∫–ª—é—á—ë–Ω.")

@bot.message_handler(commands=['auto'])
def auto_mode(message):
    set_mode(message.from_user.id, "auto")
    bot.send_message(message.chat.id, "ü§ñ –ê–≤—Ç–æ-—Ä–µ–∂–∏–º: –∏—Å–ø—Ä–∞–≤–ª—è—é —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ—à–∏–±–∫–∏ –µ—Å—Ç—å.")

@bot.message_handler(commands=['status'])
def status(message):
    mode = get_mode(message.from_user.id)
    labels = {"teacher": "–£—á–∏—Ç–µ–ª—å", "chat": "–°–æ–±–µ—Å–µ–¥–Ω–∏–∫", "mix": "–ú–∏–∫—Å", "auto": "–ê–≤—Ç–æ"}
    bot.send_message(message.chat.id, f"‚öôÔ∏è –¢–µ–∫—É—â–∏–π —Ä–µ–∂–∏–º: {labels.get(mode, mode)}")

# === Voice ===
@bot.message_handler(content_types=['voice'])
def handle_voice(message):
    try:
        mode = get_mode(message.from_user.id)

        file_info = bot.get_file(message.voice.file_id)
        file = requests.get(f'https://api.telegram.org/file/bot{BOT_TOKEN}/{file_info.file_path}', timeout=30)
        local_path = "voice.ogg"
        with open(local_path, "wb") as f:
            f.write(file.content)

        with open(local_path, "rb") as audio_file:
            transcript = client.audio.transcriptions.create(
                model="gpt-4o-mini-transcribe",
                file=audio_file
            )
        user_text = getattr(transcript, "text", str(transcript)).strip()

        de_answer, ru_explain = generate_reply(user_text, mode)

        bot.send_message(message.chat.id, de_answer)
        send_tts(message.chat.id, de_answer, base="voice_reply")

        if ru_explain:
            bot.send_message(message.chat.id, f"‚úçÔ∏è {ru_explain}")

    except Exception as e:
        bot.send_message(message.chat.id, "Es gab einen Fehler. Versuche es bitte noch einmal.")
        print("Voice handler error:", e)
        traceback.print_exc()

# === Text ===
@bot.message_handler(func=lambda m: True, content_types=['text'])
def handle_text(message):
    try:
        mode = get_mode(message.from_user.id)
        de_answer, ru_explain = generate_reply(message.text, mode)

        bot.send_message(message.chat.id, de_answer)
        send_tts(message.chat.id, de_answer, base="text_reply")

        if ru_explain:
            bot.send_message(message.chat.id, f"‚úçÔ∏è {ru_explain}")

    except Exception as e:
        bot.send_message(message.chat.id, "Entschuldige, da ist etwas schiefgelaufen.")
        print("Text handler error:", e)
        traceback.print_exc()

print("ü§ñ Bot l√§uft...")
bot.polling(none_stop=True)
