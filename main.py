import os
import traceback
import requests
import telebot
from datetime import datetime
from openai import OpenAI

# === Env ===
BOT_TOKEN = os.getenv("BOT_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
if not BOT_TOKEN:
    raise RuntimeError("BOT_TOKEN is not set in environment variables")
if not OPENAI_API_KEY:
    raise RuntimeError("OPENAI_API_KEY is not set in environment variables")

# === Clients ===
bot = telebot.TeleBot(BOT_TOKEN)
client = OpenAI(api_key=OPENAI_API_KEY)

# === Per-user —Ä–µ–∂–∏–º—ã ===
# "teacher" | "chat" | "mix"
user_modes = {}  # user_id -> mode
DEFAULT_MODE = "chat"

def get_mode(user_id: int) -> str:
    return user_modes.get(user_id, DEFAULT_MODE)

def set_mode(user_id: int, mode: str):
    user_modes[user_id] = mode

# === TTS (voice & fallback mp3) ===
def send_tts(chat_id: int, text: str, base: str = "reply"):
    """
    1) –ü—Ä–æ–±—É–µ–º OGG/Opus -> send_voice (–∫—Ä—É–∂–æ–∫)
    2) –ï—Å–ª–∏ –Ω–µ –≤—ã—à–ª–æ ‚Äî MP3 -> send_audio (–∫–∞—Ä—Ç–æ—á–∫–∞)
    """
    # --- 1) OGG/Opus ---
    try:
        ogg_path = f"{base}_{datetime.utcnow().strftime('%Y%m%d%H%M%S')}.ogg"
        with client.audio.speech.with_streaming_response.create(
            model="tts-1",
            voice="alloy",
            input=text,
            response_format="opus"
        ) as resp:
            resp.stream_to_file(ogg_path)
        with open(ogg_path, "rb") as f:
            bot.send_voice(chat_id, f)
        return
    except Exception as e:
        print("OGG/Opus TTS failed, fallback to MP3:", e)
        traceback.print_exc()

    # --- 2) MP3 fallback ---
    try:
        mp3_path = f"{base}_{datetime.utcnow().strftime('%Y%m%d%H%M%S')}.mp3"
        with client.audio.speech.with_streaming_response.create(
            model="tts-1",
            voice="alloy",
            input=text,
            response_format="mp3"
        ) as resp:
            resp.stream_to_file(mp3_path)
        with open(mp3_path, "rb") as f:
            bot.send_audio(chat_id, f, title="Antwort (TTS)")
    except Exception as e2:
        print("MP3 TTS also failed:", e2)
        traceback.print_exc()

# === –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ ===
def generate_reply(user_text: str, mode: str):
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (german_reply, ru_explain_or_empty)
    - german_reply: –∫–æ—Ä–æ—Ç–∫–∏–π –Ω–∞—Ç—É—Ä–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ –Ω–µ–º–µ—Ü–∫–æ–º
    - ru_explain_or_empty: –ø—É—Å—Ç–æ –ª–∏–±–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è+–æ–±—ä—è—Å–Ω–µ–Ω–∏–µ –Ω–∞ —Ä—É—Å—Å–∫–æ–º
    """
    if mode == "teacher":
        system = (
            "–¢—ã —É—á–∏—Ç–µ–ª—å –Ω–µ–º–µ—Ü–∫–æ–≥–æ. –°–Ω–∞—á–∞–ª–∞ –¥–∞–π –∫–æ—Ä–æ—Ç–∫–∏–π –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ –Ω–µ–º–µ—Ü–∫–æ–º "
            "(1‚Äì2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è, –±–µ–∑ –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–∏–π). –ó–∞—Ç–µ–º –æ—Ü–µ–Ω–∏ —Ä–µ–ø–ª–∏–∫—É —É—á–µ–Ω–∏–∫–∞ –∏ –ø–æ–¥–≥–æ—Ç–æ–≤—å "
            "–æ—Ç–¥–µ–ª—å–Ω—ã–π –∫—Ä–∞—Ç–∫–∏–π –±–ª–æ–∫ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π –Ω–∞ —Ä—É—Å—Å–∫–æ–º: —á—Ç–æ –±—ã–ª–æ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –∏ –ø–æ—á–µ–º—É, "
            "—Å 1‚Äì2 –ø—Ä–∏–º–µ—Ä–∞–º–∏. –ï—Å–ª–∏ –æ—à–∏–±–æ–∫ –Ω–µ—Ç ‚Äî –Ω–∞–ø–∏—à–∏ '–û—à–∏–±–æ–∫ –Ω–µ—Ç'."
        )
    elif mode == "mix":
        system = (
            "–¢—ã —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫ –Ω–∞ –Ω–µ–º–µ—Ü–∫–æ–º. –û—Ç–≤–µ—á–∞–π –∫–æ—Ä–æ—Ç–∫–æ –∏ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ –Ω–∞ –Ω–µ–º–µ—Ü–∫–æ–º. "
            "–ò—Å–ø—Ä–∞–≤–ª—è–π –∏ –æ–±—ä—è—Å–Ω—è–π –æ—à–∏–±–∫–∏ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —è–≤–Ω–æ –ø—Ä–æ—Å–∏—Ç "
            "(–ø–æ-—Ä—É—Å—Å–∫–∏ '–∏—Å–ø—Ä–∞–≤—å', –ø–æ-–Ω–µ–º–µ—Ü–∫–∏ 'korrigiere', 'korrigieren', 'Fehler', 'korrektur'). "
            "–ï—Å–ª–∏ —è–≤–Ω–æ–π –ø—Ä–æ—Å—å–±—ã –Ω–µ—Ç ‚Äî –Ω–µ –¥–∞–≤–∞–π –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π."
        )
    else:  # chat
        system = (
            "–¢—ã —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫ –Ω–∞ –Ω–µ–º–µ—Ü–∫–æ–º. –û—Ç–≤–µ—á–∞–π –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ –∏ –∫–æ—Ä–æ—Ç–∫–æ (1‚Äì2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è). "
            "–ù–µ –¥–∞–≤–∞–π –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π –∏ –æ–±—ä—è—Å–Ω–µ–Ω–∏–π."
        )

    resp = client.chat.completions.create(
        model="gpt-4o-mini",
        messages=[
            {"role": "system", "content": system},
            {"role": "user", "content": user_text}
        ],
        temperature=0.7,
    )
    full = resp.choices[0].message.content.strip()

    # –ü—Ä–æ—Å—Ç–æ–µ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ –Ω–∞ –Ω–µ–º–µ—Ü–∫–∏–π –æ—Ç–≤–µ—Ç + —Ä—É—Å—Å–∫–æ–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ.
    # –í —Ä–µ–∂–∏–º–µ teacher –º–æ–¥–µ–ª—å, –∫–∞–∫ –ø—Ä–∞–≤–∏–ª–æ, –≤—ã–¥–∞—Å—Ç 2 —Å–º—ã—Å–ª–æ–≤—ã—Ö —á–∞—Å—Ç–∏.
    german_reply = full
    ru_explain = ""

    # –≠–≤—Ä–∏—Å—Ç–∏–∫–∞: –ø—ã—Ç–∞–µ–º—Å—è –æ—Ç–¥–µ–ª–∏—Ç—å —Ä—É—Å—Å–∫–∏–π –±–ª–æ–∫, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å.
    # –ò—â–µ–º –º–∞—Ä–∫–µ—Ä—ã –∫–∏—Ä–∏–ª–ª–∏—Ü—ã –≤ –∫–æ–Ω—Ü–µ –∏–ª–∏ –∞–±–∑–∞—Ü —Å —Ä—É—Å—Å–∫–∏–º —Ç–µ–∫—Å—Ç–æ–º.
    if mode in ("teacher", "mix"):
        # –µ—Å–ª–∏ –≤ –æ—Ç–≤–µ—Ç–µ –µ—Å—Ç—å –∫–∏—Ä–∏–ª–ª–∏—Ü–∞ ‚Äî –æ—Ç–¥–µ–ª–∏–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –∞–±–∑–∞—Ü —Å –∫–∏—Ä–∏–ª–ª–∏—Ü–µ–π
        parts = [p.strip() for p in full.split("\n") if p.strip()]
        ru_parts = [p for p in parts if any("–∞" <= ch <= "—è" or "–ê" <= ch <= "–Ø" for ch in p)]
        if ru_parts:
            # —Ä—É—Å—Å–∫–∏–π –±–ª–æ–∫ ‚Äî –≤—Å–µ —Å—Ç—Ä–æ–∫–∏ —Å –∫–∏—Ä–∏–ª–ª–∏—Ü–µ–π (—Å–æ–µ–¥–∏–Ω–∏–º)
            ru_explain = "\n".join(ru_parts)
            # –Ω–µ–º–µ—Ü–∫–∏–π ‚Äî –æ—Å—Ç–∞–ª—å–Ω–æ–µ (—Å–æ–µ–¥–∏–Ω–∏–º –≤ 1‚Äì2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è)
            de_parts = [p for p in parts if p not in ru_parts]
            german_reply = " ".join(de_parts).strip() or german_reply

    return german_reply, ru_explain

# === –ö–æ–º–∞–Ω–¥—ã ===
@bot.message_handler(commands=['start', 'help'])
def start(message):
    set_mode(message.from_user.id, DEFAULT_MODE)
    bot.send_message(
        message.chat.id,
        "üëã Hallo! Ich bin dein Deutsch-Bot.\n"
        "–ö–æ–º–∞–Ω–¥—ã:\n"
        "‚Ä¢ /teacher_on ‚Äì —Ä–µ–∂–∏–º –£—á–∏—Ç–µ–ª—è (–∏—Å–ø—Ä–∞–≤–ª—è—é –∏ –æ–±—ä—è—Å–Ω—è—é –ø–æ-—Ä—É—Å—Å–∫–∏)\n"
        "‚Ä¢ /teacher_off ‚Äì —Ä–µ–∂–∏–º –°–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞ (—Ç–æ–ª—å–∫–æ –ø–æ-–Ω–µ–º–µ—Ü–∫–∏)\n"
        "‚Ä¢ /mix ‚Äì –∏—Å–ø—Ä–∞–≤–ª—è—é —Ç–æ–ª—å–∫–æ –ø–æ –ø—Ä–æ—Å—å–±–µ\n"
        "‚Ä¢ /status ‚Äì –ø–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–π —Ä–µ–∂–∏–º\n\n"
        "Schick mir Text oder eine Sprachnachricht!"
    )

@bot.message_handler(commands=['teacher_on'])
def teacher_on(message):
    set_mode(message.from_user.id, "teacher")
    bot.send_message(message.chat.id, "üßë‚Äçüè´ –†–µ–∂–∏–º –£—á–∏—Ç–µ–ª—è –≤–∫–ª—é—á—ë–Ω: –æ—Ç–≤–µ—á–∞—é –ø–æ-–Ω–µ–º–µ—Ü–∫–∏, –æ—à–∏–±–∫–∏ –æ–±—ä—è—Å–Ω—è—é –ø–æ-—Ä—É—Å—Å–∫–∏.")

@bot.message_handler(commands=['teacher_off'])
def teacher_off(message):
    set_mode(message.from_user.id, "chat")
    bot.send_message(message.chat.id, "üí¨ –†–µ–∂–∏–º –°–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞: —Ç–æ–ª—å–∫–æ –ø–æ-–Ω–µ–º–µ—Ü–∫–∏, –±–µ–∑ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π.")

@bot.message_handler(commands=['mix'])
def mix_mode(message):
    set_mode(message.from_user.id, "mix")
    bot.send_message(message.chat.id, "üîÄ –ú–∏–∫—Å: –ø–æ-–Ω–µ–º–µ—Ü–∫–∏, –æ—à–∏–±–∫–∏ –∏—Å–ø—Ä–∞–≤–ª—è—é —Ç–æ–ª—å–∫–æ –ø–æ –ø—Ä–æ—Å—å–±–µ.")

@bot.message_handler(commands=['status'])
def status(message):
    mode = get_mode(message.from_user.id)
    labels = {"teacher": "–£—á–∏—Ç–µ–ª—å", "chat": "–°–æ–±–µ—Å–µ–¥–Ω–∏–∫", "mix": "–ú–∏–∫—Å"}
    bot.send_message(message.chat.id, f"‚öôÔ∏è –¢–µ–∫—É—â–∏–π —Ä–µ–∂–∏–º: {labels.get(mode, mode)}")

# === Voice ===
@bot.message_handler(content_types=['voice'])
def handle_voice(message):
    try:
        mode = get_mode(message.from_user.id)

        # —Å–∫–∞—á–∞—Ç—å OGG –æ—Ç Telegram
        file_info = bot.get_file(message.voice.file_id)
        file = requests.get(f'https://api.telegram.org/file/bot{BOT_TOKEN}/{file_info.file_path}', timeout=30)
        local_path = "voice.ogg"
        with open(local_path, "wb") as f:
            f.write(file.content)

        # –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ
        with open(local_path, "rb") as audio_file:
            transcript = client.audio.transcriptions.create(
                model="gpt-4o-mini-transcribe",
                file=audio_file
            )
        user_text = getattr(transcript, "text", str(transcript)).strip()

        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞
        de_answer, ru_explain = generate_reply(user_text, mode)

        # –¢–µ–∫—Å—Ç–æ–º + –≥–æ–ª–æ—Å–æ–º
        bot.send_message(message.chat.id, de_answer)
        send_tts(message.chat.id, de_answer, base="voice_reply")

        # –û–±—ä—è—Å–Ω–µ–Ω–∏–µ –ø–æ-—Ä—É—Å—Å–∫–∏ (–µ—Å–ª–∏ –µ—Å—Ç—å)
        if ru_explain:
            bot.send_message(message.chat.id, f"‚úçÔ∏è {ru_explain}")

    except Exception as e:
        bot.send_message(message.chat.id, "Es gab einen Fehler. Versuche es bitte noch einmal.")
        print("Voice handler error:", e)
        traceback.print_exc()

# === Text ===
@bot.message_handler(func=lambda m: True, content_types=['text'])
def handle_text(message):
    try:
        mode = get_mode(message.from_user.id)
        de_answer, ru_explain = generate_reply(message.text, mode)

        bot.send_message(message.chat.id, de_answer)
        send_tts(message.chat.id, de_answer, base="text_reply")

        if ru_explain:
            bot.send_message(message.chat.id, f"‚úçÔ∏è {ru_explain}")

    except Exception as e:
        bot.send_message(message.chat.id, "Entschuldige, da ist etwas schiefgelaufen. Bitte versuche es sp√§ter erneut.")
        print("Text handler error:", e)
        traceback.print_exc()

print("ü§ñ Bot l√§uft...")
bot.polling(none_stop=True)
