import os
import random
import traceback
import requests
import telebot
from telebot import types
from datetime import datetime, timezone
from openai import OpenAI
from collections import defaultdict

# === Env ===
BOT_TOKEN = os.getenv("BOT_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
ADMIN_ID = int(os.getenv("ADMIN_ID", "0"))  # Telegram ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (–¥–ª—è /stats)

if not BOT_TOKEN:
    raise RuntimeError("BOT_TOKEN is not set in environment variables")
if not OPENAI_API_KEY:
    raise RuntimeError("OPENAI_API_KEY is not set in environment variables")

# === Donate ===
DONATE_URL = "https://buymeacoffee.com/debot"
DONATE_REMINDER_EVERY = 15
user_msg_count = {}

# === Clients ===
bot = telebot.TeleBot(BOT_TOKEN)
client = OpenAI(api_key=OPENAI_API_KEY)

# === –†–µ–∂–∏–º—ã ===
# "teacher" | "chat" | "mix" | "auto"
user_modes = {}
DEFAULT_MODE = "teacher"

def get_mode(user_id: int) -> str:
    return user_modes.get(user_id, DEFAULT_MODE)

def set_mode(user_id: int, mode: str):
    user_modes[user_id] = mode

# === –Ø–∑—ã–∫–∏ UI ===
LANGS = ["ru", "uk", "en", "tr", "fa", "ar"]
LANG_TITLES = {
    "ru": "–†—É—Å—Å–∫–∏–π",
    "uk": "–£–∫—Ä–∞—ó–Ω—Å—å–∫–∞",
    "en": "English",
    "tr": "T√ºrk√ße",
    "fa": "ŸÅÿßÿ±ÿ≥€å",
    "ar": "ÿßŸÑÿπÿ±ÿ®Ÿäÿ©",
}
user_langs = {}
DEFAULT_LANG = "en"  # –ø–µ—Ä–≤—ã–π —ç–∫—Ä–∞–Ω –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º

def get_lang(user_id: int) -> str:
    return user_langs.get(user_id, DEFAULT_LANG)

def set_lang(user_id: int, lang: str):
    if lang in LANGS:
        user_langs[user_id] = lang

# === –ü–µ—Ä—Å–æ–Ω—ã (–ª–∏—á–Ω–æ—Å—Ç–∏) ===
# –•—Ä–∞–Ω–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –ø–µ—Ä—Å–æ–Ω—ã –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
user_personas = {}

PERSONAS = [
    {
        "id": "student",
        "name": "Lukas",
        "age": 22,
        "city": "Berlin",
        "bio": "–°—Ç—É–¥–µ–Ω—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∏. –õ—é–±–∏—Ç –∫–æ—Ñ–µ, —Å–µ—Ä–∏–∞–ª—ã –∏ –Ω–∞—Å—Ç–æ–ª—å–Ω—ã–π —Ç–µ–Ω–Ω–∏—Å. –ù–µ–Ω–∞–≤–∏–¥–∏—Ç –±—É–º–∞–∂–Ω—É—é –±—é—Ä–æ–∫—Ä–∞—Ç–∏—é.",
        "style": "–õ—ë–≥–∫–∏–π, –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π, –∏–Ω–æ–≥–¥–∞ —à—É—Ç–∏—Ç, –∑–∞–¥–∞—ë—Ç –ø—Ä–æ—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã –ø—Ä–æ —Ö–æ–±–±–∏ –∏ –ø–æ–≤—Å–µ–¥–Ω–µ–≤–Ω–æ—Å—Ç—å.",
        "voice": "alloy"
    },
    {
        "id": "designer",
        "name": "Thomas",
        "age": 38,
        "city": "Hamburg",
        "bio": "–î–∏–∑–∞–π–Ω–µ—Ä –≤ digital-–∞–≥–µ–Ω—Ç—Å—Ç–≤–µ. –õ—é–±–∏—Ç –ø—É—Ç–µ—à–µ—Å—Ç–≤–æ–≤–∞—Ç—å, —Ñ–æ—Ç–æ –∏ –≤–µ–ª–æ—Å–∏–ø–µ–¥—ã. –ù–µ –ª—é–±–∏—Ç —Ö–∞–æ—Å –≤ –¥–µ–¥–ª–∞–π–Ω–∞—Ö.",
        "style": "–°–ø–æ–∫–æ–π–Ω—ã–π, –ø—Ä–∞–≥–º–∞—Ç–∏—á–Ω—ã–π, –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç—Å—è —Ä–∞–±–æ—Ç–æ–π/–ø—Ä–æ–µ–∫—Ç–∞–º–∏ –∏ –º–Ω–µ–Ω–∏–µ–º —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞.",
        "voice": "alloy"
    },
    {
        "id": "senior",
        "name": "Elsa",
        "age": 67,
        "city": "M√ºnchen",
        "bio": "–ù–∞ –ø–µ–Ω—Å–∏–∏, –ª—é–±–∏—Ç —Å–∞–¥, –ø—Ä–∏—Ä–æ–¥—É –∏ –ø–µ–∫–∞—Ä–Ω–∏ —Ä—è–¥–æ–º —Å –¥–æ–º–æ–º. –ù–µ –ª—é–±–∏—Ç —à—É–º –∏ —Å–ø–µ—à–∫—É.",
        "style": "–¢—ë–ø–ª—ã–π, –∑–∞–±–æ—Ç–ª–∏–≤—ã–π —Ç–æ–Ω, –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç—Å—è —Å–µ–º–µ–π–Ω—ã–º–∏ —Ç–µ–º–∞–º–∏ –∏ —Ç—Ä–∞–¥–∏—Ü–∏—è–º–∏, –¥–µ–ª–∏—Ç—Å—è –æ–ø—ã—Ç–æ–º.",
        "voice": "alloy"
    },
]

def pick_persona() -> dict:
    return random.choice(PERSONAS)

def get_persona(user_id: int) -> dict:
    persona = user_personas.get(user_id)
    if not persona:
        persona = pick_persona()
        user_personas[user_id] = persona
    return persona

# –õ–æ–∫–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç—Ä–æ–∫
I18N = {
    "ru": {
        "greet": "üëã –ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π Deutsch-–±–æ—Ç.\n–í—ã–±–µ—Ä–∏ —è–∑—ã–∫ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞:",
        "help": (
            "–ö–æ–º–∞–Ω–¥—ã:\n"
            "‚Ä¢ /teacher_on ‚Äî –≤—Å–µ–≥–¥–∞ –∏—Å–ø—Ä–∞–≤–ª—è—é –∏ –æ–±—ä—è—Å–Ω—è—é\n"
            "‚Ä¢ /teacher_off ‚Äî —Ç–æ–ª—å–∫–æ –Ω–µ–º–µ—Ü–∫–∏–π, –±–µ–∑ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π\n"
            "‚Ä¢ /mix ‚Äî –∏—Å–ø—Ä–∞–≤–ª—è—é —Ç–æ–ª—å–∫–æ –ø–æ –ø—Ä–æ—Å—å–±–µ\n"
            "‚Ä¢ /auto ‚Äî –∏—Å–ø—Ä–∞–≤–ª—è—é –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏, –Ω–æ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ—à–∏–±–∫–∏ –µ—Å—Ç—å\n"
            "‚Ä¢ /status ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–π —Ä–µ–∂–∏–º\n"
            "‚Ä¢ /language ‚Äî —Å–º–µ–Ω–∏—Ç—å —è–∑—ã–∫ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞\n"
            "‚Ä¢ /donate ‚Äî –ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å –ø—Ä–æ–µ–∫—Ç ‚òï\n"
            "‚Ä¢ /stats ‚Äî —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞ (–∞–¥–º–∏–Ω)\n\n"
            "–û—Ç–ø—Ä–∞–≤—å —Ç–µ–∫—Å—Ç –∏–ª–∏ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ!"
        ),
        "mode_teacher_on": "üßë‚Äçüè´ –†–µ–∂–∏–º –£—á–∏—Ç–µ–ª—è –≤–∫–ª—é—á—ë–Ω.",
        "mode_chat_on": "üí¨ –†–µ–∂–∏–º –°–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞ –≤–∫–ª—é—á—ë–Ω.",
        "mode_mix_on": "üîÄ –ú–∏–∫—Å –≤–∫–ª—é—á—ë–Ω.",
        "mode_auto_on": "ü§ñ –ê–≤—Ç–æ-—Ä–µ–∂–∏–º: –∏—Å–ø—Ä–∞–≤–ª—è—é —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ—à–∏–±–∫–∏ –µ—Å—Ç—å.",
        "status": "‚öôÔ∏è –¢–µ–∫—É—â–∏–π —Ä–µ–∂–∏–º: {mode}",
        "modes_labels": {"teacher": "–£—á–∏—Ç–µ–ª—å", "chat": "–°–æ–±–µ—Å–µ–¥–Ω–∏–∫", "mix": "–ú–∏–∫—Å", "auto": "–ê–≤—Ç–æ"},
        "donate_long": (
            "üí¨ –≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–≥–∞–µ—Ç –ø—Ä–∞–∫—Ç–∏–∫–æ–≤–∞—Ç—å –Ω–µ–º–µ—Ü–∫–∏–π.\n"
            "–ï—Å–ª–∏ –æ–Ω —Ç–µ–±–µ –ø–æ–ª–µ–∑–µ–Ω ‚Äî –º–æ–∂–Ω–æ –ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å –ø—Ä–æ–µ–∫—Ç ‚òï\n"
            "–õ—é–±–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –ø–æ–º–æ–≥–∞–µ—Ç —Ä–∞–∑–≤–∏–≤–∞—Ç—å –Ω–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∏ –¥–µ—Ä–∂–∞—Ç—å –±–æ—Ç–∞ –∂–∏–≤—ã–º ‚ù§Ô∏è"
        ),
        "donate_short": "‚òï –ù—Ä–∞–≤–∏—Ç—Å—è –±–æ—Ç? –ú–æ–∂–Ω–æ –ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å –ø—Ä–æ–µ–∫—Ç ‚Äî —ç—Ç–æ –æ—á–µ–Ω—å –ø–æ–º–æ–≥–∞–µ—Ç üíõ",
        "donate_btn": "‚òï –ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å –ø—Ä–æ–µ–∫—Ç",
        "admin_only": "–ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
        "err_voice": "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.",
        "err_text": "–ò–∑–≤–∏–Ω–∏, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫.",
        "lang_choose": "üåê –í—ã–±–µ—Ä–∏ —è–∑—ã–∫ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞:",
        "lang_set": "‚úÖ –Ø–∑—ã–∫ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞: {lang}",
        "corrections": "–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è:",
        "no_errors": "–û—à–∏–±–æ–∫ –Ω–µ—Ç",
    },
    "uk": {
        "greet": "üëã –ü—Ä–∏–≤—ñ—Ç! –Ø —Ç–≤—ñ–π Deutsch-–±–æ—Ç.\n–û–±–µ—Ä—ñ—Ç—å –º–æ–≤—É —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É:",
        "help": (
            "–ö–æ–º–∞–Ω–¥–∏:\n"
            "‚Ä¢ /teacher_on ‚Äî –∑–∞–≤–∂–¥–∏ –≤–∏–ø—Ä–∞–≤–ª—è—é —Ç–∞ –ø–æ—è—Å–Ω—é—é\n"
            "‚Ä¢ /teacher_off ‚Äî –ª–∏—à–µ –Ω—ñ–º–µ—Ü—å–∫–æ—é, –±–µ–∑ –≤–∏–ø—Ä–∞–≤–ª–µ–Ω—å\n"
            "‚Ä¢ /mix ‚Äî –≤–∏–ø—Ä–∞–≤–ª—è—é –ª–∏—à–µ –Ω–∞ –ø—Ä–æ—Ö–∞–Ω–Ω—è\n"
            "‚Ä¢ /auto ‚Äî –≤–∏–ø—Ä–∞–≤–ª—è—é –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ, —è–∫—â–æ —î –ø–æ–º–∏–ª–∫–∏\n"
            "‚Ä¢ /status ‚Äî –ø–æ–∫–∞–∑–∞—Ç–∏ –ø–æ—Ç–æ—á–Ω–∏–π —Ä–µ–∂–∏–º\n"
            "‚Ä¢ /language ‚Äî –∑–º—ñ–Ω–∏—Ç–∏ –º–æ–≤—É —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É\n"
            "‚Ä¢ /donate ‚Äî –ø—ñ–¥—Ç—Ä–∏–º–∞—Ç–∏ –ø—Ä–æ—î–∫—Ç ‚òï\n"
            "‚Ä¢ /stats ‚Äî —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞ (–∞–¥–º—ñ–Ω)\n\n"
            "–ù–∞–¥—ñ—à–ª–∏ —Ç–µ–∫—Å—Ç –∞–±–æ –≥–æ–ª–æ—Å–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è!"
        ),
        "mode_teacher_on": "üßë‚Äçüè´ –†–µ–∂–∏–º –í—á–∏—Ç–µ–ª—è —É–≤—ñ–º–∫–Ω–µ–Ω–æ.",
        "mode_chat_on": "üí¨ –†–µ–∂–∏–º –°–ø—ñ–≤—Ä–æ–∑–º–æ–≤–Ω–∏–∫–∞ —É–≤—ñ–º–∫–Ω–µ–Ω–æ.",
        "mode_mix_on": "üîÄ –ú—ñ–∫—Å —É–≤—ñ–º–∫–Ω–µ–Ω–æ.",
        "mode_auto_on": "ü§ñ –ê–≤—Ç–æ-—Ä–µ–∂–∏–º: –≤–∏–ø—Ä–∞–≤–ª—è—é –ª–∏—à–µ —è–∫—â–æ —î –ø–æ–º–∏–ª–∫–∏.",
        "status": "‚öôÔ∏è –ü–æ—Ç–æ—á–Ω–∏–π —Ä–µ–∂–∏–º: {mode}",
        "modes_labels": {"teacher": "–í—á–∏—Ç–µ–ª—å", "chat": "–°–ø—ñ–≤—Ä–æ–∑–º–æ–≤–Ω–∏–∫", "mix": "–ú—ñ–∫—Å", "auto": "–ê–≤—Ç–æ"},
        "donate_long": (
            "üí¨ –¶–µ–π –±–æ—Ç –¥–æ–ø–æ–º–∞–≥–∞—î –ø—Ä–∞–∫—Ç–∏–∫—É–≤–∞—Ç–∏ –Ω—ñ–º–µ—Ü—å–∫—É.\n"
            "–Ø–∫—â–æ –≤—ñ–Ω –∫–æ—Ä–∏—Å–Ω–∏–π ‚Äî –º–æ–∂–Ω–∞ –ø—ñ–¥—Ç—Ä–∏–º–∞—Ç–∏ –ø—Ä–æ—î–∫—Ç ‚òï\n"
            "–ë—É–¥—å-—è–∫–∞ –ø—ñ–¥—Ç—Ä–∏–º–∫–∞ –¥–æ–ø–æ–º–∞–≥–∞—î —Ä–æ–∑–≤–∏–≤–∞—Ç–∏ –Ω–æ–≤—ñ —Ñ—É–Ω–∫—Ü—ñ—ó ‚ù§Ô∏è"
        ),
        "donate_short": "‚òï –ü–æ–¥–æ–±–∞—î—Ç—å—Å—è –±–æ—Ç? –ú–æ–∂–Ω–∞ –ø—ñ–¥—Ç—Ä–∏–º–∞—Ç–∏ ‚Äî —Ü–µ –¥—É–∂–µ –¥–æ–ø–æ–º–∞–≥–∞—î üíõ",
        "donate_btn": "‚òï –ü—ñ–¥—Ç—Ä–∏–º–∞—Ç–∏ –ø—Ä–æ—î–∫—Ç",
        "admin_only": "–ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ –ª–∏—à–µ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
        "err_voice": "–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑.",
        "err_text": "–í–∏–±–∞—á, —â–æ—Å—å –ø—ñ—à–ª–æ –Ω–µ —Ç–∞–∫.",
        "lang_choose": "üåê –û–±–µ—Ä—ñ—Ç—å –º–æ–≤—É —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É:",
        "lang_set": "‚úÖ –ú–æ–≤—É –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {lang}",
        "corrections": "–í–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è:",
        "no_errors": "–ü–æ–º–∏–ª–æ–∫ –Ω–µ–º–∞—î",
    },
    "en": {
        "greet": "üëã Hi! I‚Äôm your Deutsch-bot.\nPlease choose your interface language:",
        "help": (
            "Commands:\n"
            "‚Ä¢ /teacher_on ‚Äî always correct and explain\n"
            "‚Ä¢ /teacher_off ‚Äî German only, no corrections\n"
            "‚Ä¢ /mix ‚Äî correct only on request\n"
            "‚Ä¢ /auto ‚Äî correct automatically if there are mistakes\n"
            "‚Ä¢ /status ‚Äî show current mode\n"
            "‚Ä¢ /language ‚Äî change interface language\n"
            "‚Ä¢ /donate ‚Äî support the project ‚òï\n"
            "‚Ä¢ /stats ‚Äî bot stats (admin)\n\n"
            "Send me a text or a voice message!"
        ),
        "mode_teacher_on": "üßë‚Äçüè´ Teacher mode enabled.",
        "mode_chat_on": "üí¨ Chat mode enabled.",
        "mode_mix_on": "üîÄ Mix mode enabled.",
        "mode_auto_on": "ü§ñ Auto mode: I correct only if there are mistakes.",
        "status": "‚öôÔ∏è Current mode: {mode}",
        "modes_labels": {"teacher": "Teacher", "chat": "Chat", "mix": "Mix", "auto": "Auto"},
        "donate_long": (
            "üí¨ This bot helps you practice German.\n"
            "If you find it useful, you can support the project ‚òï\n"
            "Any support helps develop new features ‚ù§Ô∏è"
        ),
        "donate_short": "‚òï Enjoying the bot? You can support the project ‚Äî it really helps üíõ",
        "donate_btn": "‚òï Support the project",
        "admin_only": "This command is available to the administrator only.",
        "err_voice": "An error occurred. Please try again.",
        "err_text": "Sorry, something went wrong.",
        "lang_choose": "üåê Choose your interface language:",
        "lang_set": "‚úÖ Interface language: {lang}",
        "corrections": "Corrections:",
        "no_errors": "No mistakes",
    },
    "tr": {
        "greet": "üëã Merhaba! Ben Deutsch-bot.\nL√ºtfen aray√ºz dilini se√ß:",
        "help": (
            "Komutlar:\n"
            "‚Ä¢ /teacher_on ‚Äî her zaman d√ºzeltir ve a√ßƒ±klarƒ±m\n"
            "‚Ä¢ /teacher_off ‚Äî sadece Almanca, d√ºzeltme yok\n"
            "‚Ä¢ /mix ‚Äî sadece istek √ºzerine d√ºzeltirim\n"
            "‚Ä¢ /auto ‚Äî hata varsa otomatik d√ºzeltirim\n"
            "‚Ä¢ /status ‚Äî mevcut modu g√∂ster\n"
            "‚Ä¢ /language ‚Äî aray√ºz dilini deƒüi≈ütir\n"
            "‚Ä¢ /donate ‚Äî projeyi destekle ‚òï\n"
            "‚Ä¢ /stats ‚Äî bot istatistikleri (admin)\n\n"
            "Metin ya da sesli mesaj g√∂nder!"
        ),
        "mode_teacher_on": "üßë‚Äçüè´ √ñƒüretmen modu etkin.",
        "mode_chat_on": "üí¨ Sohbet modu etkin.",
        "mode_mix_on": "üîÄ Karƒ±≈üƒ±k mod etkin.",
        "mode_auto_on": "ü§ñ Otomatik mod: Sadece hata varsa d√ºzeltirim.",
        "status": "‚öôÔ∏è Mevcut mod: {mode}",
        "modes_labels": {"teacher": "√ñƒüretmen", "chat": "Sohbet", "mix": "Karƒ±≈üƒ±k", "auto": "Otomatik"},
        "donate_long": (
            "üí¨ Bu bot Almanca pratiƒüi yapmana yardƒ±mcƒ± olur.\n"
            "Faydalƒ± bulduysan projeyi destekleyebilirsin ‚òï\n"
            "Her destek yeni √∂zelliklere yardƒ±mcƒ± olur ‚ù§Ô∏è"
        ),
        "donate_short": "‚òï Botu beƒüendin mi? Destek olabilirsin ‚Äî √ßok yardƒ±mcƒ± olur üíõ",
        "donate_btn": "‚òï Projeyi destekle",
        "admin_only": "Bu komut yalnƒ±zca y√∂neticiye √∂zeldir.",
        "err_voice": "Bir hata olu≈ütu. L√ºtfen tekrar dene.",
        "err_text": "√úzg√ºn√ºm, bir ≈üeyler ters gitti.",
        "lang_choose": "üåê Aray√ºz dilini se√ß:",
        "lang_set": "‚úÖ Aray√ºz dili: {lang}",
        "corrections": "D√ºzeltmeler:",
        "no_errors": "Hata yok",
    },
    "fa": {
        "greet": "üëã ÿ≥ŸÑÿßŸÖ! ŸÖŸÜ ÿ±ÿ®ÿßÿ™ ÿ¢ŸÑŸÖÿßŸÜ€å ÿ™Ÿà Ÿáÿ≥ÿ™ŸÖ.\nŸÑÿ∑ŸÅÿßŸã ÿ≤ÿ®ÿßŸÜ ÿ±ÿßÿ®ÿ∑ ÿ±ÿß ÿßŸÜÿ™ÿÆÿßÿ® ⁄©ŸÜ:",
        "help": (
            "ÿØÿ≥ÿ™Ÿàÿ±ÿßÿ™:\n"
            "‚Ä¢ /teacher_on ‚Äî ŸáŸÖ€åÿ¥Ÿá ÿ™ÿµÿ≠€åÿ≠ Ÿà ÿ™Ÿàÿ∂€åÿ≠ ŸÖ€å‚ÄåÿØŸáŸÖ\n"
            "‚Ä¢ /teacher_off ‚Äî ŸÅŸÇÿ∑ ÿ¢ŸÑŸÖÿßŸÜ€åÿå ÿ®ÿØŸàŸÜ ÿ™ÿµÿ≠€åÿ≠\n"
            "‚Ä¢ /mix ‚Äî ŸÅŸÇÿ∑ ÿØÿ± ÿµŸàÿ±ÿ™ ÿØÿ±ÿÆŸàÿßÿ≥ÿ™ ÿ™ÿµÿ≠€åÿ≠ ŸÖ€å‚Äå⁄©ŸÜŸÖ\n"
            "‚Ä¢ /auto ‚Äî ÿß⁄Øÿ± ÿÆÿ∑ÿß ÿ®ÿßÿ¥ÿØ ÿÆŸàÿØ⁄©ÿßÿ± ÿ™ÿµÿ≠€åÿ≠ ŸÖ€å‚Äå⁄©ŸÜŸÖ\n"
            "‚Ä¢ /status ‚Äî ŸÜŸÖÿß€åÿ¥ ÿ≠ÿßŸÑÿ™ ŸÅÿπŸÑ€å\n"
            "‚Ä¢ /language ‚Äî ÿ™ÿ∫€å€åÿ± ÿ≤ÿ®ÿßŸÜ ÿ±ÿßÿ®ÿ∑\n"
            "‚Ä¢ /donate ‚Äî ÿ≠ŸÖÿß€åÿ™ ÿßÿ≤ Ÿæÿ±Ÿà⁄òŸá ‚òï\n"
            "‚Ä¢ /stats ‚Äî ÿ¢ŸÖÿßÿ± ÿ®ÿßÿ™ (ÿßÿØŸÖ€åŸÜ)\n\n"
            "€å⁄© Ÿæ€åÿßŸÖ ŸÖÿ™ŸÜ€å €åÿß ÿµŸàÿ™€å ÿ®ŸÅÿ±ÿ≥ÿ™!"
        ),
        "mode_teacher_on": "üßë‚Äçüè´ ÿ≠ÿßŸÑÿ™ ŸÖÿπŸÑŸÖ ŸÅÿπÿßŸÑ ÿ¥ÿØ.",
        "mode_chat_on": "üí¨ ÿ≠ÿßŸÑÿ™ ⁄ØŸÅÿ™⁄ØŸà ŸÅÿπÿßŸÑ ÿ¥ÿØ.",
        "mode_mix_on": "üîÄ ÿ≠ÿßŸÑÿ™ ÿ™ÿ±⁄©€åÿ®€å ŸÅÿπÿßŸÑ ÿ¥ÿØ.",
        "mode_auto_on": "ü§ñ ÿ≠ÿßŸÑÿ™ ÿÆŸàÿØ⁄©ÿßÿ±: ŸÅŸÇÿ∑ ÿØÿ± ÿµŸàÿ±ÿ™ Ÿàÿ¨ŸàÿØ ÿÆÿ∑ÿß ÿ™ÿµÿ≠€åÿ≠ ŸÖ€å‚Äå⁄©ŸÜŸÖ.",
        "status": "‚öôÔ∏è ÿ≠ÿßŸÑÿ™ ŸÅÿπŸÑ€å: {mode}",
        "modes_labels": {"teacher": "ŸÖÿπŸÑŸÖ", "chat": "⁄ØŸÅÿ™⁄ØŸà", "mix": "ÿ™ÿ±⁄©€åÿ®€å", "auto": "ÿÆŸàÿØ⁄©ÿßÿ±"},
        "donate_long": (
            "üí¨ ÿß€åŸÜ ÿ®ÿßÿ™ ÿ®Ÿá ÿ™ŸÖÿ±€åŸÜ ÿ¢ŸÑŸÖÿßŸÜ€å ⁄©ŸÖ⁄© ŸÖ€å‚Äå⁄©ŸÜÿØ.\n"
            "ÿß⁄Øÿ± ŸÖŸÅ€åÿØ ÿßÿ≥ÿ™ ŸÖ€å‚Äåÿ™ŸàÿßŸÜ€å ÿßÿ≤ Ÿæÿ±Ÿà⁄òŸá ÿ≠ŸÖÿß€åÿ™ ⁄©ŸÜ€å ‚òï\n"
            "Ÿáÿ± ÿ≠ŸÖÿß€åÿ™€å ÿ®Ÿá ÿ™Ÿàÿ≥ÿπŸá Ÿà€å⁄ò⁄Ø€å‚ÄåŸáÿß€å ÿ¨ÿØ€åÿØ ⁄©ŸÖ⁄© ŸÖ€å‚Äå⁄©ŸÜÿØ ‚ù§Ô∏è"
        ),
        "donate_short": "‚òï ÿßÿ≤ ÿ®ÿßÿ™ ÿ±ÿßÿ∂€å Ÿáÿ≥ÿ™€åÿü ŸÖ€å‚Äåÿ™ŸàÿßŸÜ€å ÿ≠ŸÖÿß€åÿ™ ⁄©ŸÜ€å ‚Äî ÿÆ€åŸÑ€å ⁄©ŸÖ⁄© ŸÖ€å‚Äå⁄©ŸÜÿØ üíõ",
        "donate_btn": "‚òï ÿ≠ŸÖÿß€åÿ™ ÿßÿ≤ Ÿæÿ±Ÿà⁄òŸá",
        "admin_only": "ÿß€åŸÜ ÿØÿ≥ÿ™Ÿàÿ± ŸÅŸÇÿ∑ ÿ®ÿ±ÿß€å ÿßÿØŸÖ€åŸÜ ÿØÿ± ÿØÿ≥ÿ™ÿ±ÿ≥ ÿßÿ≥ÿ™.",
        "err_voice": "ÿÆÿ∑ÿß ÿ±ÿÆ ÿØÿßÿØ. ÿØŸàÿ®ÿßÿ±Ÿá ÿ™ŸÑÿßÿ¥ ⁄©ŸÜ.",
        "err_text": "ŸÖÿ™ÿ£ÿ≥ŸÅŸÖÿå ŸÖÿ¥⁄©ŸÑ€å Ÿæ€åÿ¥ ÿ¢ŸÖÿØ.",
        "lang_choose": "üåê ÿ≤ÿ®ÿßŸÜ ÿ±ÿßÿ®ÿ∑ ÿ±ÿß ÿßŸÜÿ™ÿÆÿßÿ® ⁄©ŸÜ:",
        "lang_set": "‚úÖ ÿ≤ÿ®ÿßŸÜ ÿ±ÿßÿ®ÿ∑: {lang}",
        "corrections": "ÿßÿµŸÑÿßÿ≠ÿßÿ™:",
        "no_errors": "ÿ®ÿØŸàŸÜ ÿÆÿ∑ÿß",
    },
    "ar": {
        "greet": "üëã ÿ£ŸáŸÑÿßŸã! ÿ£ŸÜÿß ÿ®Ÿàÿ™ ÿßŸÑÿ£ŸÑŸÖÿßŸÜŸäÿ©.\nŸäÿ±ÿ¨Ÿâ ÿßÿÆÿ™Ÿäÿßÿ± ŸÑÿ∫ÿ© ÿßŸÑŸàÿßÿ¨Ÿáÿ©:",
        "help": (
            "ÿßŸÑÿ£ŸàÿßŸÖÿ±:\n"
            "‚Ä¢ /teacher_on ‚Äî ÿ£ÿµÿ≠ÿ≠ Ÿàÿ£ÿ¥ÿ±ÿ≠ ÿØÿßÿ¶ŸÖÿßŸã\n"
            "‚Ä¢ /teacher_off ‚Äî ÿ£ŸÑŸÖÿßŸÜŸäÿ© ŸÅŸÇÿ∑ÿå ÿ®ŸÑÿß ÿ™ÿµÿ≠Ÿäÿ≠\n"
            "‚Ä¢ /mix ‚Äî ÿ£ÿµÿ≠ÿ≠ ÿπŸÜÿØ ÿßŸÑÿ∑ŸÑÿ® ŸÅŸÇÿ∑\n"
            "‚Ä¢ /auto ‚Äî ÿ£ÿµÿ≠ÿ≠ ÿ™ŸÑŸÇÿßÿ¶ŸäÿßŸã ÿπŸÜÿØ Ÿàÿ¨ŸàÿØ ÿ£ÿÆÿ∑ÿßÿ°\n"
            "‚Ä¢ /status ‚Äî ÿπÿ±ÿ∂ ÿßŸÑŸàÿ∂ÿπ ÿßŸÑÿ≠ÿßŸÑŸä\n"
            "‚Ä¢ /language ‚Äî ÿ™ÿ∫ŸäŸäÿ± ŸÑÿ∫ÿ© ÿßŸÑŸàÿßÿ¨Ÿáÿ©\n"
            "‚Ä¢ /donate ‚Äî ÿØÿπŸÖ ÿßŸÑŸÖÿ¥ÿ±Ÿàÿπ ‚òï\n"
            "‚Ä¢ /stats ‚Äî ÿ•ÿ≠ÿµÿßÿ°ÿßÿ™ ÿßŸÑÿ®Ÿàÿ™ (ÿßŸÑŸÖÿ¥ÿ±ŸÅ)\n\n"
            "ÿ£ÿ±ÿ≥ŸÑ ÿ±ÿ≥ÿßŸÑÿ© ŸÜÿµŸäÿ© ÿ£Ÿà ÿµŸàÿ™Ÿäÿ©!"
        ),
        "mode_teacher_on": "üßë‚Äçüè´ ÿ™ŸÖ ÿ™ŸÅÿπŸäŸÑ Ÿàÿ∂ÿπ ÿßŸÑŸÖÿπŸÑŸÖ.",
        "mode_chat_on": "üí¨ ÿ™ŸÖ ÿ™ŸÅÿπŸäŸÑ Ÿàÿ∂ÿπ ÿßŸÑÿØÿ±ÿØÿ¥ÿ©.",
        "mode_mix_on": "üîÄ ÿ™ŸÖ ÿ™ŸÅÿπŸäŸÑ ÿßŸÑŸàÿ∂ÿπ ÿßŸÑŸÖÿÆÿ™ŸÑÿ∑.",
        "mode_auto_on": "ü§ñ Ÿàÿ∂ÿπ ÿ™ŸÑŸÇÿßÿ¶Ÿä: ÿ£ÿµÿ≠ÿ≠ ŸÅŸÇÿ∑ ÿπŸÜÿØ Ÿàÿ¨ŸàÿØ ÿ£ÿÆÿ∑ÿßÿ°.",
        "status": "‚öôÔ∏è ÿßŸÑŸàÿ∂ÿπ ÿßŸÑÿ≠ÿßŸÑŸä: {mode}",
        "modes_labels": {"teacher": "ŸÖÿπŸÑŸÖ", "chat": "ÿØÿ±ÿØÿ¥ÿ©", "mix": "ŸÖÿÆÿ™ŸÑÿ∑", "auto": "ÿ™ŸÑŸÇÿßÿ¶Ÿä"},
        "donate_long": (
            "üí¨ Ÿáÿ∞ÿß ÿßŸÑÿ®Ÿàÿ™ Ÿäÿ≥ÿßÿπÿØŸÉ ÿπŸÑŸâ ŸÖŸÖÿßÿ±ÿ≥ÿ© ÿßŸÑÿ£ŸÑŸÖÿßŸÜŸäÿ©.\n"
            "ÿ•ÿ∞ÿß ŸÉÿßŸÜ ŸÖŸÅŸäÿØÿßŸã ŸäŸÖŸÉŸÜŸÉ ÿØÿπŸÖ ÿßŸÑŸÖÿ¥ÿ±Ÿàÿπ ‚òï\n"
            "ÿ£Ÿä ÿØÿπŸÖ Ÿäÿ≥ÿßÿπÿØ ÿπŸÑŸâ ÿ™ÿ∑ŸàŸäÿ± ŸÖŸäÿ≤ÿßÿ™ ÿ¨ÿØŸäÿØÿ© ‚ù§Ô∏è"
        ),
        "donate_short": "‚òï ŸáŸÑ ÿ£ÿπÿ¨ÿ®ŸÉ ÿßŸÑÿ®Ÿàÿ™ÿü ŸäŸÖŸÉŸÜŸÉ ÿØÿπŸÖ ÿßŸÑŸÖÿ¥ÿ±Ÿàÿπ ‚Äî Ÿáÿ∞ÿß Ÿäÿ≥ÿßÿπÿØ ŸÉÿ´Ÿäÿ±ÿßŸã üíõ",
        "donate_btn": "‚òï ÿØÿπŸÖ ÿßŸÑŸÖÿ¥ÿ±Ÿàÿπ",
        "admin_only": "Ÿáÿ∞ÿß ÿßŸÑÿ£ŸÖÿ± ŸÖÿ™ÿßÿ≠ ŸÑŸÑŸÖÿ¥ÿ±ŸÅ ŸÅŸÇÿ∑.",
        "err_voice": "ÿ≠ÿØÿ´ ÿÆÿ∑ÿ£. ÿ≠ÿßŸàŸÑ ŸÖÿ±ÿ© ÿ£ÿÆÿ±Ÿâ.",
        "err_text": "ÿπÿ∞ÿ±ÿßŸãÿå ÿ≠ÿØÿ´ ÿÆÿ∑ÿ£ ŸÖÿß.",
        "lang_choose": "üåê ÿßÿÆÿ™ÿ± ŸÑÿ∫ÿ© ÿßŸÑŸàÿßÿ¨Ÿáÿ©:",
        "lang_set": "‚úÖ ŸÑÿ∫ÿ© ÿßŸÑŸàÿßÿ¨Ÿáÿ©: {lang}",
        "corrections": "ÿßŸÑÿ™ÿµÿ≠Ÿäÿ≠ÿßÿ™:",
        "no_errors": "ŸÑÿß ÿ™Ÿàÿ¨ÿØ ÿ£ÿÆÿ∑ÿßÿ°",
    },
}

def t(lang: str, key: str) -> str:
    return I18N.get(lang, I18N["en"]).get(key, key)

# === –ü—Ä–æ—Å—Ç–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ ===
def utcnow():
    return datetime.now(timezone.utc)

def ymd(dt: datetime) -> str:
    return dt.strftime("%Y-%m-%d")

user_stats = {}  # user_id -> dict
daily_messages = defaultdict(int)
daily_unique = defaultdict(set)

def bump_stats(user_id: int, kind: str):
    now = utcnow()
    d = ymd(now)
    st = user_stats.get(user_id)
    if not st:
        st = {"total": 0, "text": 0, "voice": 0, "first": now, "last": now}
        user_stats[user_id] = st
    st["total"] += 1
    st[kind] += 1
    st["last"] = now
    daily_messages[d] += 1
    daily_unique[d].add(user_id)

def format_admin_stats(days: int = 7) -> str:
    total_users = len(user_stats)
    total_msgs = sum(s["total"] for s in user_stats.values())
    text_msgs = sum(s["text"] for s in user_stats.values())
    voice_msgs = sum(s["voice"] for s in user_stats.values())

    lines = []
    today = utcnow().date()
    for i in range(days):
        day = today.fromordinal(today.toordinal() - i)
        key = day.strftime("%Y-%m-%d")
        msgs = daily_messages.get(key, 0)
        uniq = len(daily_unique.get(key, set()))
        lines.append(f"{key}: {msgs} msgs, {uniq} users")
    lines = "\n".join(lines)

    return (
        "üìà Bot stats\n"
        f"‚Ä¢ Users total: {total_users}\n"
        f"‚Ä¢ Messages total: {total_msgs} (text: {text_msgs}, voice: {voice_msgs})\n\n"
        f"üóì Last {days} days:\n{lines}"
    )

# === Donate helpers ===
def send_donate_message(chat_id: int, lang: str, short: bool = False):
    text = t(lang, "donate_short") if short else t(lang, "donate_long")
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton(t(lang, "donate_btn"), url=DONATE_URL))
    bot.send_message(chat_id, text, reply_markup=markup, disable_web_page_preview=True)

def inc_and_maybe_remind(chat_id: int, user_id: int):
    cnt = user_msg_count.get(user_id, 0) + 1
    user_msg_count[user_id] = cnt
    if DONATE_REMINDER_EVERY and cnt % DONATE_REMINDER_EVERY == 0:
        send_donate_message(chat_id, get_lang(user_id), short=True)

# === TTS (OGG + fallback MP3) ===
def send_tts(chat_id: int, text: str, base: str = "reply", voice: str = "alloy"):
    try:
        ogg_path = f"{base}_{datetime.utcnow().strftime('%Y%m%d%H%M%S')}.ogg"
        with client.audio.speech.with_streaming_response.create(
            model="tts-1",
            voice=voice,
            input=text,
            response_format="opus"
        ) as resp:
            resp.stream_to_file(ogg_path)
        with open(ogg_path, "rb") as f:
            bot.send_voice(chat_id, f)
        return
    except Exception:
        traceback.print_exc()
    try:
        mp3_path = f"{base}_{datetime.utcnow().strftime('%Y%m%d%H%M%S')}.mp3"
        with client.audio.speech.with_streaming_response.create(
            model="tts-1",
            voice=voice,
            input=text,
            response_format="mp3"
        ) as resp:
            resp.stream_to_file(mp3_path)
        with open(mp3_path, "rb") as f:
            bot.send_audio(chat_id, f, title="Antwort (TTS)")
    except Exception:
        traceback.print_exc()

# === –î–µ—Ç–µ–∫—Ç–æ—Ä "–∫–∞–∫ —Å–∫–∞–∑–∞—Ç—å" ===
def detect_translation_request(user_text: str) -> bool:
    triggers = [
        "–∫–∞–∫ —Å–∫–∞–∑–∞—Ç—å", "–∫–∞–∫ –±—É–¥–µ—Ç –ø–æ-–Ω–µ–º–µ—Ü–∫–∏", "–Ω–µ –∑–Ω–∞—é –∫–∞–∫ —Å–∫–∞–∑–∞—Ç—å", "–ø–µ—Ä–µ–≤–µ–¥–∏",
        "wie sagt man", "how to say", "translate"
    ]
    if any(tk in user_text.lower() for tk in triggers):
        return True
    try:
        resp = client.chat.completions.create(
            model="gpt-4o-mini",
            messages=[
                {"role": "system", "content": "–û–ø—Ä–µ–¥–µ–ª–∏: –ø–æ—Ö–æ–∂–µ –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ –∑–∞–ø—Ä–æ—Å –ø–µ—Ä–µ–≤–æ–¥–∞ –∏–ª–∏ –ø–æ–∏—Å–∫ —Å–ª–æ–≤–∞? –û—Ç–≤–µ—Ç—å —Ç–æ–ª—å–∫–æ '–î–∞' –∏–ª–∏ '–ù–µ—Ç'."},
                {"role": "user", "content": user_text}
            ],
            temperature=0
        )
        answer = resp.choices[0].message.content.strip().lower()
        return ("–¥–∞" in answer) or ("yes" in answer)
    except Exception:
        return False

# === –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ —Å —É—á—ë—Ç–æ–º –ø–µ—Ä—Å–æ–Ω—ã –∏ –∏–Ω–∏—Ü–∏–∞—Ç–∏–≤—ã ===
INITIATIVE_CHANCE = 0.35  # –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –∑–∞–¥–∞—Ç—å —É–º–µ—Å—Ç–Ω—ã–π –≤—Å—Ç—Ä–µ—á–Ω—ã–π –≤–æ–ø—Ä–æ—Å

def persona_header(p: dict) -> str:
    # –ö–æ—Ä–æ—Ç–∫–æ–µ —Ä–µ–∑—é–º–µ –¥–ª—è —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞
    return (
        f"–¢—ã ‚Äî {p['name']}, {p['age']} –ª–µ—Ç, –∂–∏–≤—ë—à—å –≤ {p['city']}. "
        f"–•–∞—Ä–∞–∫—Ç–µ—Ä: {p['style']} –ë–∏–æ–≥—Ä–∞—Ñ–∏—è: {p['bio']} "
        "–ì–æ–≤–æ—Ä–∏—à—å —Ç–æ–ª—å–∫–æ –ø–æ-–Ω–µ–º–µ—Ü–∫–∏ –≤ –æ—Å–Ω–æ–≤–Ω–æ–π —Ä–µ–ø–ª–∏–∫–µ. "
        "–ò–∑–±–µ–≥–∞–π —Å–ª–∏—à–∫–æ–º –ª–∏—á–Ω—ã—Ö/—á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤. "
    )

def generate_followup(user_text: str, persona: dict) -> str:
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ—Ä–æ—Ç–∫–∏–π —É–º–µ—Å—Ç–Ω—ã–π –≤–æ–ø—Ä–æ—Å –ø–æ-–Ω–µ–º–µ—Ü–∫–∏, —Å–≤—è–∑–∞–Ω–Ω—ã–π —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º
    try:
        resp = client.chat.completions.create(
            model="gpt-4o-mini",
            messages=[
                {"role": "system", "content":
                    "Du stellst NUR EINE sehr kurze, nat√ºrliche R√ºckfrage auf Deutsch, passend zum letzten Nutzerbeitrag. "
                    "Kein Smalltalk ohne Bezug. Nicht zu pers√∂nlich. 1 Satz."
                },
                {"role": "user", "content": user_text}
            ],
            temperature=0.7
        )
        q = resp.choices[0].message.content.strip()
        # –ú–∏–Ω–∏-—Ñ–∏–ª—å—Ç—Ä ‚Äî —á—Ç–æ–±—ã –Ω–µ –¥—É–±–ª–∏—Ä–æ–≤–∞–ª
        if len(q) > 0 and "?" in q and len(q) <= 120:
            return q
    except Exception:
        pass
    return ""

def generate_reply(user_text: str, mode: str, lang: str, persona: dict):
    # —è–∑—ã–∫ –¥–ª—è –æ–±—ä—è—Å–Ω–µ–Ω–∏–π
    expl_map = {
        "ru": "–Ω–∞ —Ä—É—Å—Å–∫–æ–º",
        "uk": "—É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é",
        "en": "in English",
        "tr": "T√ºrk√ße",
        "fa": "ÿ®Ÿá ŸÅÿßÿ±ÿ≥€å",
        "ar": "ÿ®ÿßŸÑÿπÿ±ÿ®Ÿäÿ©",
    }
    expl_lang = expl_map.get(lang, "in English")
    corrections_tag = t(lang, "corrections")
    no_errors = t(lang, "no_errors")

    # –±–∞–∑–æ–≤—ã–π —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç —Å –ø–µ—Ä—Å–æ–Ω–æ–π
    base_persona = persona_header(persona)

    if detect_translation_request(user_text):
        system = (
            base_persona +
            "Der Nutzer sucht eine √úbersetzung oder wei√ü nicht, wie man etwas auf Deutsch sagt. "
            f"Gib die passende Formulierung, ein kurzes Grammatikkommentar {expl_lang} und 2‚Äì3 Beispiele auf Deutsch."
        )
    elif mode == "teacher":
        system = (
            base_persona +
            "Du bist Deutschlehrer. Antworte zuerst auf Deutsch (1‚Äì2 S√§tze), "
            f"dann gib einen separaten Block '{corrections_tag}' mit kurzen Korrekturen {expl_lang}. "
            f"Wenn es keine Fehler gibt, schreibe '{no_errors}'."
        )
    elif mode == "mix":
        system = (
            base_persona +
            "Du bist Gespr√§chspartner auf Deutsch. Antworte kurz und nat√ºrlich. "
            "Korrigiere Fehler nur, wenn der Nutzer es ausdr√ºcklich verlangt (z. B. 'korrigiere', '–∏—Å–ø—Ä–∞–≤—å')."
        )
    elif mode == "auto":
        system = (
            base_persona +
            "Du bist Gespr√§chspartner auf Deutsch. Antworte kurz und nat√ºrlich (1‚Äì2 S√§tze). "
            f"Wenn es Fehler im Nutzersatz gibt, f√ºge einen separaten Block '{corrections_tag}' "
            f"mit kurzen Erkl√§rungen {expl_lang} hinzu. Wenn keine Fehler da sind, antworte nur auf Deutsch."
        )
    else:
        system = (
            base_persona +
            "Du bist Gespr√§chspartner auf Deutsch. Antworte kurz und nat√ºrlich. Keine Korrekturen, keine Erkl√§rungen."
        )

    # –û—Å–Ω–æ–≤–Ω–æ–π –æ—Ç–≤–µ—Ç
    resp = client.chat.completions.create(
        model="gpt-4o-mini",
        messages=[
            {"role": "system", "content": system},
            {"role": "user", "content": user_text}
        ],
        temperature=0.7,
    )
    full = resp.choices[0].message.content.strip()

    german_reply = full
    explain = ""

    # –í—ã–¥–µ–ª–µ–Ω–∏–µ –±–ª–æ–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π
    if corrections_tag in full:
        parts = full.split(corrections_tag, 1)
        german_reply = parts[0].strip()
        tail = parts[1].strip()
        explain = f"{corrections_tag} {tail}" if tail else f"{corrections_tag} {no_errors}"

    # –° –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å—é ‚Äî –¥–æ–±–∞–≤–∏—Ç—å —É–º–µ—Å—Ç–Ω—ã–π –∫–æ—Ä–æ—Ç–∫–∏–π follow-up –≤–æ–ø—Ä–æ—Å
    if random.random() < INITIATIVE_CHANCE:
        follow = generate_followup(user_text, persona)
        if follow:
            # –ï—Å–ª–∏ –µ—Å—Ç—å –±–ª–æ–∫ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π ‚Äî –∑–∞–¥–∞–¥–∏–º –≤–æ–ø—Ä–æ—Å –ü–û–°–õ–ï –Ω–µ–º–µ—Ü–∫–æ–π —á–∞—Å—Ç–∏, –Ω–æ –î–û –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π
            if explain:
                german_reply = (german_reply + ("\n\n" if german_reply else "") + follow).strip()
            else:
                german_reply = (german_reply + ("\n\n" if german_reply else "") + follow).strip()

    return german_reply, explain

# === Language menu ===
def build_language_keyboard():
    kb = types.InlineKeyboardMarkup()
    row = []
    for code in LANGS:
        btn = types.InlineKeyboardButton(LANG_TITLES[code], callback_data=f"lang_{code}")
        row.append(btn)
        if len(row) == 3:
            kb.row(*row)
            row = []
    if row:
        kb.row(*row)
    return kb

def send_language_menu(chat_id: int, lang: str):
    kb = build_language_keyboard()
    bot.send_message(chat_id, t(lang, "lang_choose"), reply_markup=kb)

@bot.callback_query_handler(func=lambda c: c.data.startswith("lang_"))
def cb_set_lang(call):
    code = call.data.split("_", 1)[1]
    set_lang(call.from_user.id, code)
    # —Ñ–∏–∫—Å–∏—Ä—É–µ–º –ø–µ—Ä—Å–æ–Ω—É –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–∏ (–µ—Å–ª–∏ –µ—â—ë –Ω–µ –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–∞)
    _ = get_persona(call.from_user.id)

    bot.answer_callback_query(call.id)
    bot.send_message(call.message.chat.id, t(code, "lang_set").format(lang=LANG_TITLES[code]))
    bot.send_message(call.message.chat.id, t(code, "help"))

# === –ö–æ–º–∞–Ω–¥—ã —É—Ç–∏–ª–∏—Ç—ã/–¥–æ–Ω–∞—Ç/—è–∑—ã–∫/–∞–¥–º–∏–Ω ===
@bot.message_handler(commands=['donate'])
def donate_cmd(message):
    send_donate_message(message.chat.id, get_lang(message.from_user.id), short=False)

@bot.message_handler(commands=['stats'])
def admin_stats(message):
    if ADMIN_ID and message.from_user.id == ADMIN_ID:
        bot.send_message(message.chat.id, format_admin_stats(7))
    else:
        bot.send_message(message.chat.id, t(get_lang(message.from_user.id), "admin_only"))

@bot.message_handler(commands=['language'])
def language_cmd(message):
    send_language_menu(message.chat.id, get_lang(message.from_user.id))

# === –ö–æ–º–∞–Ω–¥—ã —Ä–µ–∂–∏–º–∞/—Å—Ç–∞—Ä—Ç ===
@bot.message_handler(commands=['start', 'help'])
def start(message):
    # –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –≤–∏–∑–∏—Ç
    if message.from_user.id not in user_stats:
        user_stats[message.from_user.id] = {"total": 0, "text": 0, "voice": 0, "first": utcnow(), "last": utcnow()}

    # –Ω–∞–∑–Ω–∞—á–∏–º –ø–µ—Ä—Å–æ–Ω—É, –µ—Å–ª–∏ –µ—â—ë –Ω–µ—Ç
    _ = get_persona(message.from_user.id)

    # —Å—Ç–∞—Ä—Ç–æ–≤—ã–π —ç–∫—Ä–∞–Ω
    if (message.text == "/start") and (message.from_user.id not in user_langs):
        kb = build_language_keyboard()
        bot.send_message(message.chat.id, t("en", "greet"), reply_markup=kb)
        return

    lang = get_lang(message.from_user.id)
    bot.send_message(message.chat.id, t(lang, "help"))

@bot.message_handler(commands=['teacher_on'])
def teacher_on(message):
    set_mode(message.from_user.id, "teacher")
    bot.send_message(message.chat.id, t(get_lang(message.from_user.id), "mode_teacher_on"))

@bot.message_handler(commands=['teacher_off'])
def teacher_off(message):
    set_mode(message.from_user.id, "chat")
    bot.send_message(message.chat.id, t(get_lang(message.from_user.id), "mode_chat_on"))

@bot.message_handler(commands=['mix'])
def mix_mode(message):
    set_mode(message.from_user.id, "mix")
    bot.send_message(message.chat.id, t(get_lang(message.from_user.id), "mode_mix_on"))

@bot.message_handler(commands=['auto'])
def auto_mode(message):
    set_mode(message.from_user.id, "auto")
    bot.send_message(message.chat.id, t(get_lang(message.from_user.id), "mode_auto_on"))

@bot.message_handler(commands=['status'])
def status(message):
    lang = get_lang(message.from_user.id)
    labels = I18N[lang]["modes_labels"]
    mode = get_mode(message.from_user.id)
    bot.send_message(message.chat.id, t(lang, "status").format(mode=labels.get(mode, mode)))

# === Voice ===
@bot.message_handler(content_types=['voice'])
def handle_voice(message):
    lang = get_lang(message.from_user.id)
    persona = get_persona(message.from_user.id)
    try:
        bump_stats(message.from_user.id, "voice")
        mode = get_mode(message.from_user.id)

        file_info = bot.get_file(message.voice.file_id)
        file = requests.get(f'https://api.telegram.org/file/bot{BOT_TOKEN}/{file_info.file_path}', timeout=30)
        local_path = "voice.ogg"
        with open(local_path, "wb") as f:
            f.write(file.content)

        with open(local_path, "rb") as audio_file:
            transcript = client.audio.transcriptions.create(
                model="gpt-4o-mini-transcribe",
                file=audio_file
            )
        user_text = getattr(transcript, "text", str(transcript)).strip()

        de_answer, explain = generate_reply(user_text, mode, lang, persona)

        bot.send_message(message.chat.id, de_answer)
        send_tts(message.chat.id, de_answer, base="voice_reply", voice=persona.get("voice", "alloy"))

        if explain:
            bot.send_message(message.chat.id, f"‚úçÔ∏è {explain}")

        inc_and_maybe_remind(message.chat.id, message.from_user.id)

    except Exception:
        bot.send_message(message.chat.id, t(lang, "err_voice"))
        traceback.print_exc()

# === Text ===
@bot.message_handler(func=lambda m: True, content_types=['text'])
def handle_text(message):
    lang = get_lang(message.from_user.id)
    persona = get_persona(message.from_user.id)
    try:
        bump_stats(message.from_user.id, "text")
        mode = get_mode(message.from_user.id)
        de_answer, explain = generate_reply(message.text, mode, lang, persona)

        bot.send_message(message.chat.id, de_answer)
        send_tts(message.chat.id, de_answer, base="text_reply", voice=persona.get("voice", "alloy"))

        if explain:
            bot.send_message(message.chat.id, f"‚úçÔ∏è {explain}")

        inc_and_maybe_remind(message.chat.id, message.from_user.id)

    except Exception:
        bot.send_message(message.chat.id, t(lang, "err_text"))
        traceback.print_exc()

print("ü§ñ Bot l√§uft...")
bot.polling(none_stop=True)
