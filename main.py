import os
import traceback
import requests
import telebot
from telebot import types
from datetime import datetime
from openai import OpenAI

# === Env ===
BOT_TOKEN = os.getenv("BOT_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
if not BOT_TOKEN:
    raise RuntimeError("BOT_TOKEN is not set in environment variables")
if not OPENAI_API_KEY:
    raise RuntimeError("OPENAI_API_KEY is not set in environment variables")

# === Donate ===
DONATE_URL = "https://buymeacoffee.com/debot"  # —Ç–≤–æ—è —Å—Å—ã–ª–∫–∞ –Ω–∞ –ø–æ–¥–¥–µ—Ä–∂–∫—É
DONATE_REMINDER_EVERY = 15                      # –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å –∫–∞–∂–¥—ã–µ N —Å–æ–æ–±—â–µ–Ω–∏–π (–º–æ–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å)
user_msg_count = {}                              # user_id -> int

# === Clients ===
bot = telebot.TeleBot(BOT_TOKEN)
client = OpenAI(api_key=OPENAI_API_KEY)

# === –†–µ–∂–∏–º—ã ===
# "teacher" | "chat" | "mix" | "auto"
user_modes = {}
DEFAULT_MODE = "teacher"   # <-- –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é —Ç–µ–ø–µ—Ä—å –£—á–∏—Ç–µ–ª—å

def get_mode(user_id: int) -> str:
    return user_modes.get(user_id, DEFAULT_MODE)

def set_mode(user_id: int, mode: str):
    user_modes[user_id] = mode

# === –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –¥–æ–Ω–∞—Ç–µ ===
def send_donate_message(chat_id: int, short: bool = False):
    text_long = (
        "üí¨ –≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–≥–∞–µ—Ç –ø—Ä–∞–∫—Ç–∏–∫–æ–≤–∞—Ç—å –Ω–µ–º–µ—Ü–∫–∏–π. "
        "–ï—Å–ª–∏ –æ–Ω —Ç–µ–±–µ –ø–æ–ª–µ–∑–µ–Ω ‚Äî –º–æ–∂–Ω–æ –ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å –ø—Ä–æ–µ–∫—Ç ‚òï\n"
        "–õ—é–±–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –ø–æ–º–æ–≥–∞–µ—Ç —Ä–∞–∑–≤–∏–≤–∞—Ç—å –Ω–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∏ –¥–µ—Ä–∂–∞—Ç—å –±–æ—Ç–∞ –∂–∏–≤—ã–º ‚ù§Ô∏è"
    )
    text_short = "‚òï –ù—Ä–∞–≤–∏—Ç—Å—è –±–æ—Ç? –ú–æ–∂–Ω–æ –ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å –ø—Ä–æ–µ–∫—Ç ‚Äî —ç—Ç–æ –æ—á–µ–Ω—å –ø–æ–º–æ–≥–∞–µ—Ç üíõ"
    text = text_short if short else text_long

    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("‚òï –ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å –ø—Ä–æ–µ–∫—Ç", url=DONATE_URL))
    bot.send_message(chat_id, text, reply_markup=markup, disable_web_page_preview=True)

def inc_and_maybe_remind(chat_id: int, user_id: int):
    cnt = user_msg_count.get(user_id, 0) + 1
    user_msg_count[user_id] = cnt
    if DONATE_REMINDER_EVERY and cnt % DONATE_REMINDER_EVERY == 0:
        send_donate_message(chat_id, short=True)

# === TTS (OGG + fallback MP3) ===
def send_tts(chat_id: int, text: str, base: str = "reply"):
    try:
        ogg_path = f"{base}_{datetime.utcnow().strftime('%Y%m%d%H%M%S')}.ogg"
        with client.audio.speech.with_streaming_response.create(
            model="tts-1",
            voice="alloy",
            input=text,
            response_format="opus"
        ) as resp:
            resp.stream_to_file(ogg_path)
        with open(ogg_path, "rb") as f:
            bot.send_voice(chat_id, f)
        return
    except Exception as e:
        print("OGG/Opus TTS failed:", e)
        traceback.print_exc()

    try:
        mp3_path = f"{base}_{datetime.utcnow().strftime('%Y%m%d%H%M%S')}.mp3"
        with client.audio.speech.with_streaming_response.create(
            model="tts-1",
            voice="alloy",
            input=text,
            response_format="mp3"
        ) as resp:
            resp.stream_to_file(mp3_path)
        with open(mp3_path, "rb") as f:
            bot.send_audio(chat_id, f, title="Antwort (TTS)")
    except Exception as e2:
        print("MP3 TTS also failed:", e2)
        traceback.print_exc()

# === –î–µ—Ç–µ–∫—Ç–æ—Ä "–∫–∞–∫ —Å–∫–∞–∑–∞—Ç—å" ===
def detect_translation_request(user_text: str) -> bool:
    triggers = [
        "–∫–∞–∫ —Å–∫–∞–∑–∞—Ç—å", "–∫–∞–∫ –±—É–¥–µ—Ç –ø–æ-–Ω–µ–º–µ—Ü–∫–∏", "–Ω–µ –∑–Ω–∞—é –∫–∞–∫ —Å–∫–∞–∑–∞—Ç—å", "–ø–µ—Ä–µ–≤–µ–¥–∏",
        "wie sagt man", "how to say", "translate"
    ]
    if any(t in user_text.lower() for t in triggers):
        return True

    try:
        resp = client.chat.completions.create(
            model="gpt-4o-mini",
            messages=[
                {"role": "system", "content": "–û–ø—Ä–µ–¥–µ–ª–∏: –ø–æ—Ö–æ–∂–µ –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ –∑–∞–ø—Ä–æ—Å –ø–µ—Ä–µ–≤–æ–¥–∞ –∏–ª–∏ –ø–æ–∏—Å–∫ —Å–ª–æ–≤–∞? –û—Ç–≤–µ—Ç—å —Ç–æ–ª—å–∫–æ '–î–∞' –∏–ª–∏ '–ù–µ—Ç'."},
                {"role": "user", "content": user_text}
            ],
            temperature=0
        )
        answer = resp.choices[0].message.content.strip().lower()
        return "–¥–∞" in answer
    except:
        return False

# === –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ ===
def generate_reply(user_text: str, mode: str):
    if detect_translation_request(user_text):
        system = (
            "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏—â–µ—Ç –ø–µ—Ä–µ–≤–æ–¥ –∏–ª–∏ –Ω–µ –∑–Ω–∞–µ—Ç, –∫–∞–∫ —Å–∫–∞–∑–∞—Ç—å —á—Ç–æ-—Ç–æ –ø–æ-–Ω–µ–º–µ—Ü–∫–∏. "
            "–î–∞–π –ø–µ—Ä–µ–≤–æ–¥, –æ–±—ä—è—Å–Ω–∏ –≥—Ä–∞–º–º–∞—Ç–∏–∫—É –∏ –ø–æ—Å—Ç—Ä–æ–π 2‚Äì3 –ø—Ä–∏–º–µ—Ä–∞. "
            "–ü–∏—à–∏ –Ω–∞ —Ä—É—Å—Å–∫–æ–º –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ, –ø—Ä–∏–º–µ—Ä—ã –Ω–∞ –Ω–µ–º–µ—Ü–∫–æ–º."
        )
    elif mode == "teacher":
        system = (
            "–¢—ã —É—á–∏—Ç–µ–ª—å –Ω–µ–º–µ—Ü–∫–æ–≥–æ —è–∑—ã–∫–∞. –û—Ç–≤–µ—á–∞–π –Ω–∞ –Ω–µ–º–µ—Ü–∫–æ–º (1‚Äì2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è), "
            "—á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –¥–∏–∞–ª–æ–≥. –ó–∞—Ç–µ–º, –æ—Ç–¥–µ–ª—å–Ω–æ, —Å–¥–µ–ª–∞–π –±–ª–æ–∫: "
            "'–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è:' —Å –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ–º –æ—à–∏–±–æ–∫ –Ω–∞ —Ä—É—Å—Å–∫–æ–º. "
            "–ï—Å–ª–∏ –æ—à–∏–±–æ–∫ –Ω–µ—Ç ‚Äî –Ω–∞–ø–∏—à–∏ '–û—à–∏–±–æ–∫ –Ω–µ—Ç'."
        )
    elif mode == "mix":
        system = (
            "–¢—ã —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫ –Ω–∞ –Ω–µ–º–µ—Ü–∫–æ–º. –û—Ç–≤–µ—á–∞–π –∫–æ—Ä–æ—Ç–∫–æ –∏ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ. "
            "–ò—Å–ø—Ä–∞–≤–ª—è–π –æ—à–∏–±–∫–∏ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —è–≤–Ω–æ –ø—Ä–æ—Å–∏—Ç ('–∏—Å–ø—Ä–∞–≤—å', 'korrigiere')."
        )
    elif mode == "auto":
        system = (
            "–¢—ã —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫ –Ω–∞ –Ω–µ–º–µ—Ü–∫–æ–º. –û—Ç–≤–µ—á–∞–π –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ –∏ –∫–æ—Ä–æ—Ç–∫–æ (1‚Äì2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è). "
            "–ï—Å–ª–∏ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ —É—á–µ–Ω–∏–∫–∞ –µ—Å—Ç—å –æ—à–∏–±–∫–∏ ‚Äî –¥–æ–±–∞–≤—å –æ—Ç–¥–µ–ª—å–Ω—ã–π –±–ª–æ–∫ '–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è:' "
            "—Å –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ–º –æ—à–∏–±–æ–∫ –Ω–∞ —Ä—É—Å—Å–∫–æ–º. "
            "–ï—Å–ª–∏ –æ—à–∏–±–æ–∫ –Ω–µ—Ç ‚Äî –ø—Ä–æ—Å—Ç–æ –æ—Ç–≤–µ—Ç—å –ø–æ-–Ω–µ–º–µ—Ü–∫–∏."
        )
    else:  # chat
        system = (
            "–¢—ã —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫ –Ω–∞ –Ω–µ–º–µ—Ü–∫–æ–º. –û—Ç–≤–µ—á–∞–π –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ –∏ –∫–æ—Ä–æ—Ç–∫–æ. "
            "–ù–µ –∏—Å–ø—Ä–∞–≤–ª—è–π –∏ –Ω–µ –æ–±—ä—è—Å–Ω—è–π."
        )

    resp = client.chat.completions.create(
        model="gpt-4o-mini",
        messages=[
            {"role": "system", "content": system},
            {"role": "user", "content": user_text}
        ],
        temperature=0.7,
    )
    full = resp.choices[0].message.content.strip()

    german_reply = full
    ru_explain = ""

    if "–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è:" in full:
        parts = full.split("–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è:")
        german_reply = parts[0].strip()
        ru_explain = "–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è:" + parts[1].strip()

    return german_reply, ru_explain

# === –ö–æ–º–∞–Ω–¥—ã ===
@bot.message_handler(commands=['donate'])
def donate_cmd(message):
    send_donate_message(message.chat.id, short=False)

@bot.message_handler(commands=['start', 'help'])
def start(message):
    set_mode(message.from_user.id, DEFAULT_MODE)
    bot.send_message(
        message.chat.id,
        "üëã Hallo! Ich bin dein Deutsch-Bot.\n"
        "–ö–æ–º–∞–Ω–¥—ã:\n"
        "‚Ä¢ /teacher_on ‚Äì –≤—Å–µ–≥–¥–∞ –∏—Å–ø—Ä–∞–≤–ª—è—é –∏ –æ–±—ä—è—Å–Ω—è—é\n"
        "‚Ä¢ /teacher_off ‚Äì —Ç–æ–ª—å–∫–æ –Ω–µ–º–µ—Ü–∫–∏–π, –±–µ–∑ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π\n"
        "‚Ä¢ /mix ‚Äì –∏—Å–ø—Ä–∞–≤–ª—è—é —Ç–æ–ª—å–∫–æ –ø–æ –ø—Ä–æ—Å—å–±–µ\n"
        "‚Ä¢ /auto ‚Äì –∏—Å–ø—Ä–∞–≤–ª—è—é –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏, –Ω–æ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ—à–∏–±–∫–∏ –µ—Å—Ç—å\n"
        "‚Ä¢ /status ‚Äì –ø–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–π —Ä–µ–∂–∏–º\n"
        "‚Ä¢ /lesson ‚Äì –Ω–∞—á–∞—Ç—å —É—Ä–æ–∫\n"
        "‚Ä¢ /donate ‚Äì –ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å –ø—Ä–æ–µ–∫—Ç ‚òï\n\n"
        "Schick mir Text oder eine Sprachnachricht!"
    )

@bot.message_handler(commands=['teacher_on'])
def teacher_on(message):
    set_mode(message.from_user.id, "teacher")
    bot.send_message(message.chat.id, "üßë‚Äçüè´ –†–µ–∂–∏–º –£—á–∏—Ç–µ–ª—è –≤–∫–ª—é—á—ë–Ω.")

@bot.message_handler(commands=['teacher_off'])
def teacher_off(message):
    set_mode(message.from_user.id, "chat")
    bot.send_message(message.chat.id, "üí¨ –†–µ–∂–∏–º –°–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞ –≤–∫–ª—é—á—ë–Ω.")

@bot.message_handler(commands=['mix'])
def mix_mode(message):
    set_mode(message.from_user.id, "mix")
    bot.send_message(message.chat.id, "üîÄ –ú–∏–∫—Å –≤–∫–ª—é—á—ë–Ω.")

@bot.message_handler(commands=['auto'])
def auto_mode(message):
    set_mode(message.from_user.id, "auto")
    bot.send_message(message.chat.id, "ü§ñ –ê–≤—Ç–æ-—Ä–µ–∂–∏–º: –∏—Å–ø—Ä–∞–≤–ª—è—é —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ—à–∏–±–∫–∏ –µ—Å—Ç—å.")

@bot.message_handler(commands=['status'])
def status(message):
    mode = get_mode(message.from_user.id)
    labels = {"teacher": "–£—á–∏—Ç–µ–ª—å", "chat": "–°–æ–±–µ—Å–µ–¥–Ω–∏–∫", "mix": "–ú–∏–∫—Å", "auto": "–ê–≤—Ç–æ"}
    bot.send_message(message.chat.id, f"‚öôÔ∏è –¢–µ–∫—É—â–∏–π —Ä–µ–∂–∏–º: {labels.get(mode, mode)}")

# === –£—Ä–æ–∫–∏ ===
@bot.message_handler(commands=['lesson'])
def lesson(message):
    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(types.InlineKeyboardButton("–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ", callback_data="lesson_greeting"))
    keyboard.add(types.InlineKeyboardButton("–ü–æ–∫—É–ø–∫–∏", callback_data="lesson_shopping"))
    keyboard.add(types.InlineKeyboardButton("–ü—É—Ç–µ—à–µ—Å—Ç–≤–∏—è", callback_data="lesson_travel"))
    keyboard.add(types.InlineKeyboardButton("–†–∞–±–æ—Ç–∞", callback_data="lesson_work"))
    bot.send_message(message.chat.id, "üìö –í—ã–±–µ—Ä–∏ —Ç–µ–º—É —É—Ä–æ–∫–∞:", reply_markup=keyboard)

@bot.callback_query_handler(func=lambda call: call.data.startswith("lesson_"))
def lesson_callback(call):
    topic = call.data.split("_", 1)[1]
    system = (
        f"–°–¥–µ–ª–∞–π –º–∏–Ω–∏-—É—Ä–æ–∫ –ø–æ —Ç–µ–º–µ '{topic}'. "
        "1) –û–±—ä—è—Å–Ω–∏ –ø—Ä–∞–≤–∏–ª–æ/—Ñ—Ä–∞–∑—ã (–Ω–∞ —Ä—É—Å—Å–∫–æ–º), "
        "2) –¥–∞–π 2‚Äì3 –ø—Ä–∏–º–µ—Ä–∞ –Ω–∞ –Ω–µ–º–µ—Ü–∫–æ–º, "
        "3) –∑–∞–¥–∞–π –≤–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –¥–ª—è –ø—Ä–∞–∫—Ç–∏–∫–∏."
    )
    resp = client.chat.completions.create(
        model="gpt-4o-mini",
        messages=[{"role": "system", "content": system}],
        temperature=0.7,
    )
    lesson_text = resp.choices[0].message.content.strip()
    bot.send_message(call.message.chat.id, lesson_text)

# === Voice ===
@bot.message_handler(content_types=['voice'])
def handle_voice(message):
    try:
        mode = get_mode(message.from_user.id)

        file_info = bot.get_file(message.voice.file_id)
        file = requests.get(f'https://api.telegram.org/file/bot{BOT_TOKEN}/{file_info.file_path}', timeout=30)
        local_path = "voice.ogg"
        with open(local_path, "wb") as f:
            f.write(file.content)

        with open(local_path, "rb") as audio_file:
            transcript = client.audio.transcriptions.create(
                model="gpt-4o-mini-transcribe",
                file=audio_file
            )
        user_text = getattr(transcript, "text", str(transcript)).strip()

        de_answer, ru_explain = generate_reply(user_text, mode)

        bot.send_message(message.chat.id, de_answer)
        send_tts(message.chat.id, de_answer, base="voice_reply")

        if ru_explain:
            bot.send_message(message.chat.id, f"‚úçÔ∏è {ru_explain}")

        inc_and_maybe_remind(message.chat.id, message.from_user.id)

    except Exception as e:
        bot.send_message(message.chat.id, "Es gab einen Fehler. Versuche es bitte noch einmal.")
        print("Voice handler error:", e)
        traceback.print_exc()

# === Text ===
@bot.message_handler(func=lambda m: True, content_types=['text'])
def handle_text(message):
    try:
        mode = get_mode(message.from_user.id)
        de_answer, ru_explain = generate_reply(message.text, mode)

        bot.send_message(message.chat.id, de_answer)
        send_tts(message.chat.id, de_answer, base="text_reply")

        if ru_explain:
            bot.send_message(message.chat.id, f"‚úçÔ∏è {ru_explain}")

        inc_and_maybe_remind(message.chat.id, message.from_user.id)

    except Exception as e:
        bot.send_message(message.chat.id, "Entschuldige, da ist etwas schiefgelaufen.")
        print("Text handler error:", e)
        traceback.print_exc()

print("ü§ñ Bot l√§uft...")
bot.polling(none_stop=True)
